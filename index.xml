<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Deepak Ramani&#39;s blog</title>
<link>https://dr563105.github.io/index.html</link>
<atom:link href="https://dr563105.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>This is Deepak Ramani&#39;s personal blog.</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Thu, 27 Apr 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Getting started with S3 using boto3</title>
  <link>https://dr563105.github.io/posts/2023-04-27-getting-started-with-s3/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-8HL173849C"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8HL173849C');
</script>




<p><strong>Boto3</strong> is an AWS python SDK that allows access to AWS services like EC2 and S3. It provides a python object-oriented API and as well as low-level access to AWS services</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install boto3</span></code></pre></div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> boto3, botocore</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb2-3"></span>
<span id="cb2-4">files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/*'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#to upload multiple files</span></span>
<span id="cb2-5">files</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>['data/Player Data.xlsx',
 'data/30-days-create-folds.ipynb',
 'data/ARK_GENOMIC_REVOLUTION_ETF_ARKG_HOLDINGS.csv',
 'data/star_pattern_turtlesim.png']</code></pre>
</div>
</div>
<section id="create-a-session-and-client" class="level2">
<h2 class="anchored" data-anchor-id="create-a-session-and-client">Create a session and client</h2>
<p>Boto3’s region defaults to N-Virginia. To create buckets in another region, region name has to be explicitly mentioned using session object.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.Session(region_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'us-east-2'</span>)</span>
<span id="cb4-2">s3client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s3'</span>)</span>
<span id="cb4-3">s3resource <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boto3.resource(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s3'</span>)</span></code></pre></div>
</div>
<p>S3 buckets have to follow bucket naming <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html">rules</a>.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">bucket_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my-s3bucket1-usohio-region'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my-s3bucket2-usohio-region'</span>]</span>
<span id="cb5-2">s3location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LocationConstraint'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'us-east-2'</span>}</span></code></pre></div>
</div>
</section>
<section id="check-if-bucket-exists-in-s3" class="level2">
<h2 class="anchored" data-anchor-id="check-if-bucket-exists-in-s3">Check if bucket exists in S3</h2>
<p>Checking for something before creation is one of the important tasks to avoid unnecessary errors. Here we check if the buckets already exists.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_bucket(bucket):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Checks if a bucket is present in S3</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    args:</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bucket: takes bucket name</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb6-8">        s3client.head_bucket(Bucket<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bucket)</span>
<span id="cb6-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bucket exists'</span>)</span>
<span id="cb6-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> botocore.exceptions.ClientError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb6-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If a client error is thrown, then check that it was a 404 error.</span></span>
<span id="cb6-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it was a 404 error, then the bucket does not exist.</span></span>
<span id="cb6-14">        error_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(e.response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Error'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Code'</span>])</span>
<span id="cb6-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> error_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">403</span>:</span>
<span id="cb6-16">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Private Bucket. Forbidden Access!"</span>)</span>
<span id="cb6-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> error_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">404</span>:</span>
<span id="cb6-19">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bucket Does Not Exist!"</span>)</span>
<span id="cb6-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bucket <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bucket_names: </span>
<span id="cb7-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(check_bucket(bucket))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Bucket exists
True
Bucket exists
True</code></pre>
</div>
</div>
</section>
<section id="create-a-bucket-in-s3" class="level2">
<h2 class="anchored" data-anchor-id="create-a-bucket-in-s3">Create a bucket in S3</h2>
<p>If the buckets don’t exist, we create them. We need to supply bucket name, a dictionary specifying in which region the bucket has to be created.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bucket_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bucket_names: </span>
<span id="cb9-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span>(check_bucket(bucket_name)):</span>
<span id="cb9-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Creating a bucket..'</span>)</span>
<span id="cb9-4">        s3client.create_bucket(Bucket <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bucket_name, CreateBucketConfiguration<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>s3location)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Bucket exists
Bucket exists</code></pre>
</div>
</div>
</section>
<section id="bucket-versioning" class="level2">
<h2 class="anchored" data-anchor-id="bucket-versioning">Bucket Versioning</h2>
<p>Bucket versioning initial state is not set by default. The response from when not initialised doesn’t carry status information rather status dict is absent. Status expects two return states: <strong>enabled</strong>, <strong>suspended</strong>. On first creation, the status is in disabled, an unknown state.</p>
<p>So in order to make it appear in the REST response, bucket must be enabled by calling the <code>BucketVersioning()</code> boto3 resource function. If we then check the status, it will be present in the REST response.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_buckets_versioning_client(bucketname):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Checks if bucket versioning is enabled/suspended or initialised</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bucketname: bucket name to check versioning</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns: response status - enabled or suspended</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-8">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s3client.get_bucket_versioning(Bucket <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bucketname)</span>
<span id="cb11-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Status'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> response <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> (response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Status'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enabled'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Status'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Suspended'</span>):</span>
<span id="cb11-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Bucket </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bucketname<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> status: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Status"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Status'</span>]</span>
<span id="cb11-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb11-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Bucket versioning not initialised for bucket: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bucketname<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Enabling...'</span>)</span>
<span id="cb11-14">        s3resource.BucketVersioning(bucket_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bucketname).enable()</span>
<span id="cb11-15">        enable_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s3resource.BucketVersioning(bucket_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bucket_name).status</span>
<span id="cb11-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> enable_response</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bucket_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bucket_names: </span>
<span id="cb12-2">    version_status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_buckets_versioning_client(bucket_name)</span>
<span id="cb12-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Versioning status: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>version_status<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Bucket my-s3bucket1-usohio-region status: Enabled
Versioning status: Enabled
Bucket my-s3bucket2-usohio-region status: Enabled
Versioning status: Enabled</code></pre>
</div>
</div>
</section>
<section id="to-suspend-bucket-versioning" class="level2">
<h2 class="anchored" data-anchor-id="to-suspend-bucket-versioning">To suspend bucket versioning</h2>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bucket_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bucket_names:</span>
<span id="cb14-2">    version_status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_buckets_versioning_client(bucket_name)</span>
<span id="cb14-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Versioning status: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>version_status<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> version_status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enabled'</span>:</span>
<span id="cb14-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Disabling again..'</span>)</span>
<span id="cb14-6">        s3resource.BucketVersioning(bucket_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bucket_name).suspend()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Bucket my-s3bucket1-usohio-region status: Enabled
Versioning status: Enabled
Disabling again..
Bucket my-s3bucket2-usohio-region status: Enabled
Versioning status: Enabled
Disabling again..</code></pre>
</div>
</div>
</section>
<section id="to-enable-bucket-versioning" class="level2">
<h2 class="anchored" data-anchor-id="to-enable-bucket-versioning">To enable bucket versioning</h2>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bucket_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bucket_names:</span>
<span id="cb16-2">    version_status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_buckets_versioning_client(bucket_name)</span>
<span id="cb16-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Versioning status: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>version_status<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> version_status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Suspended'</span>:</span>
<span id="cb16-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Enabling again..'</span>)</span>
<span id="cb16-6">        s3resource.BucketVersioning(bucket_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bucket_name).enable()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Bucket my-s3bucket1-usohio-region status: Suspended
Versioning status: Suspended
Enabling again..
Bucket my-s3bucket2-usohio-region status: Suspended
Versioning status: Suspended
Enabling again..</code></pre>
</div>
</div>
</section>
<section id="get-bucket-list-from-s3" class="level2">
<h2 class="anchored" data-anchor-id="get-bucket-list-from-s3">Get bucket list from S3</h2>
<p>We can list the buckets in S3 using <code>list_buckets()</code> client function. It return a dict. We can iterate through <code>Buckets</code> key to find the names of the buckets.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">buckets_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s3client.list_buckets()</span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bucket <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> buckets_list[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buckets'</span>]:</span>
<span id="cb18-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(bucket[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mlops-project-sales-forecast-bucket
mlops-project-sales-forecast-bucket-dr563105-mlops-project
my-s3bucket1-usohio-region
my-s3bucket2-usohio-region
s3-for-terraform-state</code></pre>
</div>
</div>
</section>
<section id="upload-files-to-s3" class="level2">
<h2 class="anchored" data-anchor-id="upload-files-to-s3">Upload files to S3</h2>
<p>Boto3 allows file upload to S3. The <code>upload_file</code> client function requires three mandatory arguments -</p>
<pre><code>1. filename of the file to be uploaded
2. bucket_name, Into which bucket the file would be uploaded
3. key, name of the file in S3</code></pre>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> upload_files_to_s3(filename, bucket_name, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ExtraArgs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Uploads file to S3 bucket</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    filename: takes local filename to be uploaded</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bucker_name: name of the bucket into which the file is uploaded</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    key: name of the file in the bucket. Default:None</span></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ExtraArgs: other arguments. Default:None</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb21-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb21-11">        key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filename</span>
<span id="cb21-12">    </span>
<span id="cb21-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb21-14">        s3client.upload_file(filename,bucket_name,key)</span>
<span id="cb21-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'uploaded file:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb21-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> botocore.exceptions.ClientError <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb21-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(e)</span></code></pre></div>
</div>
<p>We can make use of <code>glob</code> module to upload multiple files in a folder</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">bucket1_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb22-2">bucket2_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],files[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span>
<span id="cb22-3">bucket1_files, bucket2_files</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>(['data/30-days-create-folds.ipynb',
  'data/ARK_GENOMIC_REVOLUTION_ETF_ARKG_HOLDINGS.csv'],
 ['data/Player Data.xlsx', 'data/star_pattern_turtlesim.png'])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bucket1_files:</span>
<span id="cb24-2">    upload_files_to_s3(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>,bucket_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bucket_names[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>uploaded file:data/30-days-create-folds.ipynb
uploaded file:data/ARK_GENOMIC_REVOLUTION_ETF_ARKG_HOLDINGS.csv</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bucket2_files:</span>
<span id="cb26-2">    upload_files_to_s3(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>,bucket_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bucket_names[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>uploaded file:data/Player Data.xlsx
uploaded file:data/star_pattern_turtlesim.png</code></pre>
</div>
</div>
</section>
<section id="get-files-list" class="level2">
<h2 class="anchored" data-anchor-id="get-files-list">Get files list</h2>
<p>Getting the files list from each bucket done using <code>list_objects</code> client function. It returns dict and we can iterate through <code>Contents</code> key to retrieve the filenames.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bucket <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bucket_names:</span>
<span id="cb28-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Listing object inside bucket:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bucket<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb28-3">    list_obj_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s3client.list_objects(Bucket<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bucket)</span>
<span id="cb28-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> obj <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> list_obj_response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Contents'</span>]:</span>
<span id="cb28-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(obj[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Key'</span>])</span>
<span id="cb28-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Listing object inside bucket:my-s3bucket1-usohio-region
data/30-days-create-folds.ipynb
data/ARK_GENOMIC_REVOLUTION_ETF_ARKG_HOLDINGS.csv

Listing object inside bucket:my-s3bucket2-usohio-region
data/Player Data.xlsx
data/star_pattern_turtlesim.png
</code></pre>
</div>
</div>
</section>
<section id="download-files" class="level2">
<h2 class="anchored" data-anchor-id="download-files">Download files</h2>
<p>Downloading a file is very similar to uploading one. We need specify bucket name, name of the file to be downloaded, and the destination filename.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Downloading files from bucket:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bucket_names[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb30-2">s3client.download_file(Bucket<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bucket_names[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],Key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/star_pattern_turtlesim.png'</span>,Filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'downloaded_turtlesim.jpg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading files from bucket:my-s3bucket2-usohio-region</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This blog post shows how to use the boto3 python SDK to manage S3 aws service. With the help of documentation, we can implement require functionalities.</p>


</section>

 ]]></description>
  <category>boto3</category>
  <category>s3</category>
  <category>aws</category>
  <guid>https://dr563105.github.io/posts/2023-04-27-getting-started-with-s3/index.html</guid>
  <pubDate>Thu, 27 Apr 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dr563105.github.io/posts/2023-04-27-getting-started-with-s3/logo_awss3.png" medium="image" type="image/png" height="44" width="144"/>
</item>
<item>
  <title>Setup Skim PDF reader with VimTeX in Mac OS</title>
  <dc:creator>Deepak Ramani</dc:creator>
  <link>https://dr563105.github.io/posts/2023-02-06-skim-vimtex/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-8HL173849C"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8HL173849C');
</script>




<p><a href="https://github.com/lervag/vimtex">VimTeX</a> plugin written by Karl Yngve Lervåg is one of the goto plugins to manage LaTeX files with Vim/Neovim text editors. VimTeX allows integration with several PDF viewers. In Mac OS, <a href="https://skim-app.sourceforge.io">Skim</a> and <a href="https://pwmt.org/projects/zathura/">Zathura</a> PDF readers allow easy integration with LaTeX. Since Zathura’s installation in Mac OS involves more steps, we will be using Skim for this post.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>You should have a working LaTeX setup and Neovim version &gt; 0.8.3 is advised.</p>
</div>
</div>
<section id="install-skim" class="level2">
<h2 class="anchored" data-anchor-id="install-skim">Install Skim</h2>
<p>With <a href="../brew.sh">Homebrew</a></p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cask</span> skim</span></code></pre></div>
</div>
<p>Or download the dmg file of the current version(as of writing latest version is v1.6.8) from <a href="https://skim-app.sourceforge.io">Skim’s website</a>.</p>
</section>
<section id="install-vimtex" class="level2">
<h2 class="anchored" data-anchor-id="install-vimtex">Install VimTeX</h2>
<p>Using <a href="https://github.com/junegunn/vim-plug">vim-plug</a> plugin manager we add the following line to <code>.vimrc</code> or <code>init.vim</code> or <code>init.lua</code></p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Inside init.vim</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Plug</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lervag/vimtex'</span></span></code></pre></div>
</div>
</section>
<section id="pdf-preview" class="level2">
<h2 class="anchored" data-anchor-id="pdf-preview">Pdf preview</h2>
<p>Conversion between TeX and PDF is one of the most common operations while writing a scientific document. Though it is possible to open the PDF file in one of the commercially available PDF readers, a seamless integration with neovim(in our case) is appreciated. This is where Skim comes into the picture. By default, Skim allows native, seamless integration with the LaTex editor of choice. In our case, we can make VimTex interact with Skim with just a few lines of config.</p>
</section>
<section id="configurations" class="level2">
<h2 class="anchored" data-anchor-id="configurations">Configurations</h2>
<section id="minimal-setup-and-forward-search" class="level3">
<h3 class="anchored" data-anchor-id="minimal-setup-and-forward-search">Minimal setup and Forward Search</h3>
<p>We require the following lines to make VimTeX talk to Skim within neovim. This direction of communication, is known as <em>forward search</em>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Inside init.vim</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><span id="annotated-cell-3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hover over the number at the end of each line to see its importance</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1">1</button><span id="annotated-cell-3-2" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">let</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">g</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">vimtex_view_method</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skim'</span></span>
<span id="annotated-cell-3-3"></span>
<span id="annotated-cell-3-4"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2">2</button><span id="annotated-cell-3-5" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">let</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">g</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">vimtex_view_skim_sync</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3">3</button><span id="annotated-cell-3-6" class="code-annotation-target"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">let</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">g</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">vimtex_view_skim_activate</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-lines="2" data-code-cell="annotated-cell-3" data-code-annotation="1">Choose which program to use to view PDF file.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-lines="5" data-code-cell="annotated-cell-3" data-code-annotation="2">Value 1 allows forward search after every successful compilation.</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-lines="6" data-code-cell="annotated-cell-3" data-code-annotation="3">Value 1 allows change focus to skim after command <code>:VimtexView</code> is given.</span>
</dd>
</dl>
<p>The forward search allows any change made in the TeX file automatically refreshes Skim to reflect those changes in PDF. One of the other common uses is cursor sync between the TeX file and PDF. Setting <code>let g:vimtex_view_skim_sync</code> allows placing the cursor in some position in the Tex file sync with the same position in the PDF after every successful compilation(<code>:VimtexCompile</code>). Setting <code>let g:vimtex_view_skim_activate</code> allows to shift focus of control from neovim to Skim and bring it to foreground.</p>
</section>
<section id="inverse-or-backward-search" class="level3">
<h3 class="anchored" data-anchor-id="inverse-or-backward-search">Inverse or Backward Search</h3>
<p>So far there was only one channel of communication between neovim(editor) and Skim. A backward communication is possible but it took quite bit of hacking to get it to work. More on that read <a href="https://jdhao.github.io/2021/02/20/inverse_search_setup_neovim_vimtex/">this jdhao’s post</a>. However, with the release of <a href="https://github.com/lervag/vimtex/releases/tag/v2.8">VimTex v2.8</a>, it has become simple to setup.</p>
<p>Consider a scenario where we are going through a paper and find an error, instead of going back to source TeX file and finding the error location can be cumbersome. Using <em>backward search</em>, we can go to the error location from PDF to TeX. For Skim, to activate <em>backward search</em> press <code>shift</code> and <code>command</code> together and <code>click</code> the position in PDF using the mouse. That location gets reflected in the editor in the background. For more information, see <code>:h :VimtexInverseSearch</code></p>
<p>Natively, every instance of neovim starts a server <sup>1</sup>. With Skim as client and nvim as server, we can interact in that direction.</p>
<p>In order to do so, in the preferances pane of Skim, navigate to <code>Sync</code> tab. There, in the <code>PDF-TeX Sync support</code>, make <code>preset</code> as <code>custom</code>, <code>command</code> as <code>nvim</code>(use <code>vim</code> if you use vim editor), and set <code>arguments</code> as <code>--headless -c "VimtexInverseSearch %line '%file'"</code>.</p>
<p><img src="https://dr563105.github.io/posts/2023-02-06-skim-vimtex/skim_setting.png" title="Skim preferances window" class="img-fluid"></p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Skim must be started by VimTeX (either through compiler callback or explicitly via <leader>lv) for backward sync to work! (This is how Skim “knows” which neovim instance – terminal or GUI – to sync to.)</leader></p>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>With just four lines of settings in the <code>init.vim</code> file and a line in Skim preferances, we can activate both forward and backward search features with VimTeX.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In the nvim command line, run <code>:echo v:servername</code> to know the name of the server↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>skim</category>
  <category>vimtex</category>
  <category>neovim</category>
  <category>vim</category>
  <category>mac</category>
  <category>inverse search</category>
  <category>backward search</category>
  <guid>https://dr563105.github.io/posts/2023-02-06-skim-vimtex/index.html</guid>
  <pubDate>Mon, 06 Feb 2023 00:00:00 GMT</pubDate>
  <media:content url="https://dr563105.github.io/posts/2023-02-06-skim-vimtex/neovim-logo1.png" medium="image" type="image/png" height="38" width="144"/>
</item>
<item>
  <title>Using json_normalize Pandas function</title>
  <dc:creator>Deepak Ramani</dc:creator>
  <link>https://dr563105.github.io/posts/2022-09-24-using-json-normalize/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-8HL173849C"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8HL173849C');
</script>




<p><strong>J</strong>ava<strong>s</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JSON) is a widely used format for storing and exchanging data. Coming from the relational database, it could be difficult to understand NoSQL databases that use JSON to store data and similarly REST API’s response. JSON is also used in storing football event data. It allows easy addition of features in the future.</p>
<p>Though JSON format allows for easier exchange of data, for analysis, a tabular form would be appropriate. A JSON structure can be of two forms: a JSON object and list of JSON objects. Since our programming language of choice is Python, those structures can be somewhat called as a dictionary object or list of dicts.</p>
<p><img src="https://dr563105.github.io/posts/2022-09-24-using-json-normalize/jsonobjectimage.png" title="source: B. Chen" class="img-fluid"><sup>1</sup></p>
<p>Importing pandas library,</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
<section id="flattening-a-simple-json" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="flattening-a-simple-json"><span class="header-section-number">1</span> Flattening a simple JSON</h2>
<p><strong>A dict</strong></p>
<p>Let us consider a simple dictionary: 3 keys and their respective values.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">viv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15623</span>, </span>
<span id="cb2-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vivianne Miedema"</span>, </span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jersey_number"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>}</span>
<span id="cb2-5">viv</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>{'player_id': 15623, 'player_name': 'Vivianne Miedema', 'jersey_number': 11}</code></pre>
</div>
</div>
<p>We use the <code>json_normalize</code> API<sup>2</sup> to flatten a JSON dict.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.json_normalize(viv)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">player_id</th>
<th data-quarto-table-cell-role="th">player_name</th>
<th data-quarto-table-cell-role="th">jersey_number</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>15623</td>
<td>Vivianne Miedema</td>
<td>11</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 1 entries, 0 to 0
Data columns (total 3 columns):
 #   Column         Non-Null Count  Dtype 
---  ------         --------------  ----- 
 0   player_id      1 non-null      int64 
 1   player_name    1 non-null      object
 2   jersey_number  1 non-null      int64 
dtypes: int64(2), object(1)
memory usage: 152.0+ bytes</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p><strong>Side Note</strong>: If the data contains something that is not compatible with python, in this case a <code>null</code> variable, there are two choices:</p>
</blockquote>
<blockquote class="blockquote">
<ul>
<li>Change <code>null</code> to <code>None</code></li>
<li>Pass the data through <code>json.loads</code> function</li>
</ul>
</blockquote>
<p><strong>Change <code>null</code> to <code>None</code></strong></p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">null <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb7-2">viv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15623</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vivianne Miedema"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jersey_number"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_nickname"</span> : null}</span>
<span id="cb7-3">viv1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>{'player_id': 15623,
 'player_name': 'Vivianne Miedema',
 'jersey_number': 11,
 'player_nickname': None}</code></pre>
</div>
</div>
<p><strong>Make data as string and pass to <code>json.loads</code></strong></p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-2">viv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{ "player_id" : 15623, "player_name" : "Vivianne Miedema", "jersey_number" : 11, "player_nickname" : null}'</span></span>
<span id="cb9-3">viv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(viv1)</span>
<span id="cb9-4">viv1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>{'player_id': 15623,
 'player_name': 'Vivianne Miedema',
 'jersey_number': 11,
 'player_nickname': None}</code></pre>
</div>
</div>
<section id="a-list-of-dicts" class="level3" data-number="1.1">
<h3 data-number="1.1" class="anchored" data-anchor-id="a-list-of-dicts"><span class="header-section-number">1.1</span> A list of dicts</h3>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">player_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb11-2">    { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15623</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vivianne Miedema"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jersey_number"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_nickname"</span> : null },</span>
<span id="cb11-3">    { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10658</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Danielle van de Donk"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jersey_number"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_nickname"</span> : null }</span>
<span id="cb11-4">]</span>
<span id="cb11-5">pd.json_normalize(player_list)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">player_id</th>
<th data-quarto-table-cell-role="th">player_name</th>
<th data-quarto-table-cell-role="th">jersey_number</th>
<th data-quarto-table-cell-role="th">player_nickname</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>15623</td>
<td>Vivianne Miedema</td>
<td>11</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>10658</td>
<td>Danielle van de Donk</td>
<td>7</td>
<td>None</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We have the JSON list of dicts in a tabular form. All the keys become columns and their values as entries.</p>
<p>When we flattern a list with a key-value pair missing for an entry, instead of an error, <strong>NaN</strong>(not a number) is stored.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">player_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-2">    { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15623</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vivianne Miedema"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jersey_number"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_nickname"</span> : null },</span>
<span id="cb12-3">    { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10658</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player_name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Danielle van de Donk"</span>}</span>
<span id="cb12-4">]</span>
<span id="cb12-5">pd.json_normalize(player_list)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">player_id</th>
<th data-quarto-table-cell-role="th">player_name</th>
<th data-quarto-table-cell-role="th">jersey_number</th>
<th data-quarto-table-cell-role="th">player_nickname</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>15623</td>
<td>Vivianne Miedema</td>
<td>11.0</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>10658</td>
<td>Danielle van de Donk</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p><strong>Note</strong>: See how <code>player_nickname</code> when not specified also turns to <strong>NaN</strong> from <strong>None</strong>.</p>
</section>
</section>
<section id="flattening-a-multi-level-json" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="flattening-a-multi-level-json"><span class="header-section-number">2</span> Flattening a multi-level JSON</h2>
<section id="a-simple-dict" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="a-simple-dict"><span class="header-section-number">2.1</span> A simple dict</h3>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">at_kick0ff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d712fb93-c464-4621-98ba-f2bdcd5641db"</span>,</span>
<span id="cb13-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00:00:00.000"</span>,</span>
<span id="cb13-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>,</span>
<span id="cb13-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lineup"</span>:{</span>
<span id="cb13-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>:{</span>
<span id="cb13-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15623</span>,</span>
<span id="cb13-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vivianne Miedema"</span></span>
<span id="cb13-9">      },</span>
<span id="cb13-10">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"position"</span>:{</span>
<span id="cb13-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>,</span>
<span id="cb13-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Center Forward"</span></span>
<span id="cb13-13">      },</span>
<span id="cb13-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jersey_number"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span></span>
<span id="cb13-15">    }</span>
<span id="cb13-16">}</span>
<span id="cb13-17">at_kick0ff</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>{'id': 'd712fb93-c464-4621-98ba-f2bdcd5641db',
 'timestamp': '00:00:00.000',
 'duration': 0.0,
 'lineup': {'player': {'id': 15623, 'name': 'Vivianne Miedema'},
  'position': {'id': 23, 'name': 'Center Forward'},
  'jersey_number': 11}}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pd.json_normalize(at_kick0ff)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">duration</th>
<th data-quarto-table-cell-role="th">lineup.player.id</th>
<th data-quarto-table-cell-role="th">lineup.player.name</th>
<th data-quarto-table-cell-role="th">lineup.position.id</th>
<th data-quarto-table-cell-role="th">lineup.position.name</th>
<th data-quarto-table-cell-role="th">lineup.jersey_number</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>d712fb93-c464-4621-98ba-f2bdcd5641db</td>
<td>00:00:00.000</td>
<td>0.0</td>
<td>15623</td>
<td>Vivianne Miedema</td>
<td>23</td>
<td>Center Forward</td>
<td>11</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>You can see that <em>lineup</em> dictionary key’s nested key-value pairs have been expanded into individual columns. If you feel that is unnecessary, we can restrict expansion by using <em>max_level</em> argument. With <code>max_level=1</code>, the flattening goes one level deeper.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">pd.json_normalize(at_kick0ff, max_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">duration</th>
<th data-quarto-table-cell-role="th">lineup.player</th>
<th data-quarto-table-cell-role="th">lineup.position</th>
<th data-quarto-table-cell-role="th">lineup.jersey_number</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>d712fb93-c464-4621-98ba-f2bdcd5641db</td>
<td>00:00:00.000</td>
<td>0.0</td>
<td>{'id': 15623, 'name': 'Vivianne Miedema'}</td>
<td>{'id': 23, 'name': 'Center Forward'}</td>
<td>11</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="a-list-of-dicts-1" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="a-list-of-dicts-1"><span class="header-section-number">2.2</span> A list of dicts</h3>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">first_pass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb17-2">  {</span>
<span id="cb17-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"15758edb-58cd-49c4-a817-d2ef48ba3bcf"</span>,</span>
<span id="cb17-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00:00:00.504"</span>,</span>
<span id="cb17-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>:{</span>
<span id="cb17-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb17-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pass"</span></span>
<span id="cb17-8">    },</span>
<span id="cb17-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"play_pattern"</span>:{</span>
<span id="cb17-10">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb17-11">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"From Kick Off"</span></span>
<span id="cb17-12">    },</span>
<span id="cb17-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span>:{</span>
<span id="cb17-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15623</span>,</span>
<span id="cb17-15">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vivianne Miedema"</span></span>
<span id="cb17-16">    },</span>
<span id="cb17-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pass"</span>:{</span>
<span id="cb17-18">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recipient"</span>:{</span>
<span id="cb17-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10666</span>,</span>
<span id="cb17-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dominique Johanna Anna Bloodworth"</span></span>
<span id="cb17-21">      },</span>
<span id="cb17-22">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length"</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.455845</span>,</span>
<span id="cb17-23">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"angle"</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.3561945</span>,</span>
<span id="cb17-24">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span>:{</span>
<span id="cb17-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb17-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ground Pass"</span></span>
<span id="cb17-27">      },</span>
<span id="cb17-28">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_location"</span>:[</span>
<span id="cb17-29">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span>,</span>
<span id="cb17-30">        <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">22.0</span></span>
<span id="cb17-31">      ]</span>
<span id="cb17-32">    }</span>
<span id="cb17-33">  }, {</span>
<span id="cb17-34">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ab5674a4-e824-4143-9f6f-3f1645557413"</span>,</span>
<span id="cb17-35">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"00:00:04.201"</span>,</span>
<span id="cb17-36">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span> : {</span>
<span id="cb17-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb17-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pass"</span></span>
<span id="cb17-39">  },</span>
<span id="cb17-40">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"play_pattern"</span> : {</span>
<span id="cb17-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb17-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"From Kick Off"</span></span>
<span id="cb17-43">  },</span>
<span id="cb17-44">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"player"</span> : {</span>
<span id="cb17-45">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10666</span>,</span>
<span id="cb17-46">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dominique Johanna Anna Bloodworth"</span></span>
<span id="cb17-47">  },</span>
<span id="cb17-48">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"location"</span> : [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">45.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.0</span> ],</span>
<span id="cb17-49">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duration"</span> : <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.795201</span>,</span>
<span id="cb17-50">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pass"</span> : {</span>
<span id="cb17-51">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length"</span> : <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">51.62364</span>,</span>
<span id="cb17-52">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"angle"</span> : <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.55038595</span>,</span>
<span id="cb17-53">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span> : {</span>
<span id="cb17-54">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span> : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb17-55">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"High Pass"</span></span>
<span id="cb17-56">    },</span>
<span id="cb17-57">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_location"</span> : [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">89.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">56.0</span> ]</span>
<span id="cb17-58">  }</span>
<span id="cb17-59">}</span>
<span id="cb17-60">]</span>
<span id="cb17-61">    </span>
<span id="cb17-62">pd.json_normalize(first_pass)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">type.id</th>
<th data-quarto-table-cell-role="th">type.name</th>
<th data-quarto-table-cell-role="th">play_pattern.id</th>
<th data-quarto-table-cell-role="th">play_pattern.name</th>
<th data-quarto-table-cell-role="th">player.id</th>
<th data-quarto-table-cell-role="th">player.name</th>
<th data-quarto-table-cell-role="th">pass.recipient.id</th>
<th data-quarto-table-cell-role="th">pass.recipient.name</th>
<th data-quarto-table-cell-role="th">pass.length</th>
<th data-quarto-table-cell-role="th">pass.angle</th>
<th data-quarto-table-cell-role="th">pass.height.id</th>
<th data-quarto-table-cell-role="th">pass.height.name</th>
<th data-quarto-table-cell-role="th">pass.end_location</th>
<th data-quarto-table-cell-role="th">location</th>
<th data-quarto-table-cell-role="th">duration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>15758edb-58cd-49c4-a817-d2ef48ba3bcf</td>
<td>00:00:00.504</td>
<td>30</td>
<td>Pass</td>
<td>9</td>
<td>From Kick Off</td>
<td>15623</td>
<td>Vivianne Miedema</td>
<td>10666.0</td>
<td>Dominique Johanna Anna Bloodworth</td>
<td>25.455845</td>
<td>-2.356194</td>
<td>1</td>
<td>Ground Pass</td>
<td>[42.0, 22.0]</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>ab5674a4-e824-4143-9f6f-3f1645557413</td>
<td>00:00:04.201</td>
<td>30</td>
<td>Pass</td>
<td>9</td>
<td>From Kick Off</td>
<td>10666</td>
<td>Dominique Johanna Anna Bloodworth</td>
<td>NaN</td>
<td>NaN</td>
<td>51.623640</td>
<td>0.550386</td>
<td>3</td>
<td>High Pass</td>
<td>[89.0, 56.0]</td>
<td>[45.0, 29.0]</td>
<td>1.795201</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Limiting the levels…</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">pd.json_normalize(first_pass, max_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">id</th>
<th data-quarto-table-cell-role="th">timestamp</th>
<th data-quarto-table-cell-role="th">type</th>
<th data-quarto-table-cell-role="th">play_pattern</th>
<th data-quarto-table-cell-role="th">player</th>
<th data-quarto-table-cell-role="th">pass</th>
<th data-quarto-table-cell-role="th">location</th>
<th data-quarto-table-cell-role="th">duration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>15758edb-58cd-49c4-a817-d2ef48ba3bcf</td>
<td>00:00:00.504</td>
<td>{'id': 30, 'name': 'Pass'}</td>
<td>{'id': 9, 'name': 'From Kick Off'}</td>
<td>{'id': 15623, 'name': 'Vivianne Miedema'}</td>
<td>{'recipient': {'id': 10666, 'name': 'Dominique...</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>ab5674a4-e824-4143-9f6f-3f1645557413</td>
<td>00:00:04.201</td>
<td>{'id': 30, 'name': 'Pass'}</td>
<td>{'id': 9, 'name': 'From Kick Off'}</td>
<td>{'id': 10666, 'name': 'Dominique Johanna Anna ...</td>
<td>{'length': 51.62364, 'angle': 0.55038595, 'hei...</td>
<td>[45.0, 29.0]</td>
<td>1.795201</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="flattening-a-json-nested-list" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="flattening-a-json-nested-list"><span class="header-section-number">3</span> Flattening a JSON nested list</h2>
<section id="a-simple-dict-1" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="a-simple-dict-1"><span class="header-section-number">3.1</span> A simple dict</h3>
<p>For this case, let us consider a simpler example than of football event data. The key <code>info</code> has list of dictionaries inside its structure. We call it <em>nested dict</em>.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">awfc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb19-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AWFC'</span>,</span>
<span id="cb19-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'location'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'London'</span>,</span>
<span id="cb19-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ranking'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb19-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>: {</span>
<span id="cb19-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'manager'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Joe'</span>,</span>
<span id="cb19-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contacts'</span>: {</span>
<span id="cb19-8">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'email'</span>: {</span>
<span id="cb19-9">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coaching'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'joe@afc.com'</span>,</span>
<span id="cb19-10">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'general'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info@afc.com'</span></span>
<span id="cb19-11">          },</span>
<span id="cb19-12">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tel'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'123456789'</span>,</span>
<span id="cb19-13">      }</span>
<span id="cb19-14">    },</span>
<span id="cb19-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>: [</span>
<span id="cb19-16">      { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Viv'</span> },</span>
<span id="cb19-17">      { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DvD'</span> },</span>
<span id="cb19-18">      { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kim'</span> }</span>
<span id="cb19-19">    ],</span>
<span id="cb19-20">}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>awfc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>{'team': 'AWFC',
 'location': 'London',
 'ranking': 1,
 'info': {'manager': 'Joe',
  'contacts': {'email': {'coaching': 'joe@afc.com', 'general': 'info@afc.com'},
   'tel': '123456789'}},
 'players': [{'name': 'Viv'}, {'name': 'DvD'}, {'name': 'Kim'}]}</code></pre>
</div>
</div>
<p>The <em>players</em> column has a list of dicts. So, we can flatten that column using <em>record_path</em> argument.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">pd.json_normalize(awfc, record_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Viv</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>DvD</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Kim</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>But, making a separate table with no reference id has no meaning. To prevent that we can append revelant columns to the new table using <em>meta</em> argument. Here we want their <em>team</em> and <em>Telephone number</em>. The <em>tel</em> key lies within <code>info-&gt;contacts-&gt;tel</code>. So, we need provide that path like so <code>['info', 'contacts', 'tel']</code>.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">pd.json_normalize(awfc, record_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>], meta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>,[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contacts'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tel'</span>]])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">info.contacts.tel</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Viv</td>
<td>AWFC</td>
<td>123456789</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>DvD</td>
<td>AWFC</td>
<td>123456789</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Kim</td>
<td>AWFC</td>
<td>123456789</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The order in which those paths are mentioned, the order in which those columns are appended.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">pd.json_normalize(awfc, record_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>], meta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>,[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contacts'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tel'</span>],[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'manager'</span>]])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">info.contacts.tel</th>
<th data-quarto-table-cell-role="th">info.manager</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Viv</td>
<td>AWFC</td>
<td>123456789</td>
<td>Joe</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>DvD</td>
<td>AWFC</td>
<td>123456789</td>
<td>Joe</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Kim</td>
<td>AWFC</td>
<td>123456789</td>
<td>Joe</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="a-list-of-dicts-2" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="a-list-of-dicts-2"><span class="header-section-number">3.2</span> A list of dicts</h3>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">json_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb24-2">    { </span>
<span id="cb24-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'arsenal'</span>, </span>
<span id="cb24-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red-white'</span>,</span>
<span id="cb24-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>: {</span>
<span id="cb24-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>: { </span>
<span id="cb24-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xxxx'</span>, </span>
<span id="cb24-8">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'doctor'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yyyy'</span> </span>
<span id="cb24-9">            }</span>
<span id="cb24-10">        },</span>
<span id="cb24-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>: [</span>
<span id="cb24-12">            { </span>
<span id="cb24-13">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Viv'</span>, </span>
<span id="cb24-14">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>, </span>
<span id="cb24-15">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>: { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> } </span>
<span id="cb24-16">            },</span>
<span id="cb24-17">            { </span>
<span id="cb24-18">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Beth'</span>, </span>
<span id="cb24-19">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>, </span>
<span id="cb24-20">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>: { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> } </span>
<span id="cb24-21">            },</span>
<span id="cb24-22">        ]</span>
<span id="cb24-23">    },</span>
<span id="cb24-24">    { </span>
<span id="cb24-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'city'</span>, </span>
<span id="cb24-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>,</span>
<span id="cb24-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>: {</span>
<span id="cb24-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>: { </span>
<span id="cb24-29">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaa'</span>, </span>
<span id="cb24-30">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'doctor'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbbb'</span> </span>
<span id="cb24-31">            }</span>
<span id="cb24-32">        },</span>
<span id="cb24-33">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>: [</span>
<span id="cb24-34">            { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Steph'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span> },</span>
<span id="cb24-35">            { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lucy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span> },</span>
<span id="cb24-36">        ]</span>
<span id="cb24-37">    },</span>
<span id="cb24-38">]</span>
<span id="cb24-39"></span>
<span id="cb24-40">pd.json_normalize(json_list)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">colour</th>
<th data-quarto-table-cell-role="th">players</th>
<th data-quarto-table-cell-role="th">info.staff.physio</th>
<th data-quarto-table-cell-role="th">info.staff.doctor</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>arsenal</td>
<td>red-white</td>
<td>[{'name': 'Viv', 'sex': 'F', 'stats': {'goals'...</td>
<td>xxxx</td>
<td>yyyy</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>city</td>
<td>blue</td>
<td>[{'name': 'Steph', 'sex': 'F'}, {'name': 'Lucy...</td>
<td>aaaa</td>
<td>bbbb</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">pd.json_normalize(json_list, record_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">stats.goals</th>
<th data-quarto-table-cell-role="th">stats.assists</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Viv</td>
<td>F</td>
<td>101.0</td>
<td>40.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Beth</td>
<td>F</td>
<td>60.0</td>
<td>25.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Steph</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Lucy</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>How about we now append the players’ team, colour, and their physio.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">pd.json_normalize(</span>
<span id="cb26-2">    json_list, </span>
<span id="cb26-3">    record_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>], </span>
<span id="cb26-4">    meta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>]]</span>
<span id="cb26-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">stats.goals</th>
<th data-quarto-table-cell-role="th">stats.assists</th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">colour</th>
<th data-quarto-table-cell-role="th">info.staff.physio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Viv</td>
<td>F</td>
<td>101.0</td>
<td>40.0</td>
<td>arsenal</td>
<td>red-white</td>
<td>xxxx</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Beth</td>
<td>F</td>
<td>60.0</td>
<td>25.0</td>
<td>arsenal</td>
<td>red-white</td>
<td>xxxx</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Steph</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
<td>city</td>
<td>blue</td>
<td>aaaa</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Lucy</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
<td>city</td>
<td>blue</td>
<td>aaaa</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="ignoring-key-errors" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="ignoring-key-errors"><span class="header-section-number">4</span> Ignoring key errors</h2>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">json_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb27-2">    { </span>
<span id="cb27-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'arsenal'</span>, </span>
<span id="cb27-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red-white'</span>,</span>
<span id="cb27-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>: {</span>
<span id="cb27-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>: { </span>
<span id="cb27-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xxxx'</span>, </span>
<span id="cb27-8">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'doctor'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yyyy'</span> </span>
<span id="cb27-9">            }</span>
<span id="cb27-10">        },</span>
<span id="cb27-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>: [</span>
<span id="cb27-12">            { </span>
<span id="cb27-13">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Viv'</span>, </span>
<span id="cb27-14">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>, </span>
<span id="cb27-15">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>: { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> } </span>
<span id="cb27-16">            },</span>
<span id="cb27-17">            { </span>
<span id="cb27-18">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Beth'</span>, </span>
<span id="cb27-19">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>, </span>
<span id="cb27-20">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>: { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> } </span>
<span id="cb27-21">            },</span>
<span id="cb27-22">        ]</span>
<span id="cb27-23">    },</span>
<span id="cb27-24">    { </span>
<span id="cb27-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'city'</span>, </span>
<span id="cb27-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>,</span>
<span id="cb27-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>: {</span>
<span id="cb27-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>: { </span>
<span id="cb27-29">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'doctor'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbbb'</span> </span>
<span id="cb27-30">            }</span>
<span id="cb27-31">        },</span>
<span id="cb27-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>: [</span>
<span id="cb27-33">            { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Steph'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span> },</span>
<span id="cb27-34">            { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lucy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span> },</span>
<span id="cb27-35">        ]</span>
<span id="cb27-36">    },</span>
<span id="cb27-37">]</span></code></pre></div>
</div>
<p>Notice that the key <em>physio</em> is missing from the entry <code>team=city</code>. What happens if we try to access <em>physio</em> key inside <code>meta</code>?</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">pd.json_normalize(</span>
<span id="cb28-2">    json_list, </span>
<span id="cb28-3">    record_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>], </span>
<span id="cb28-4">    meta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>]],</span>
<span id="cb28-5">)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>KeyError: "Key 'physio' not found. To replace missing values of 'physio' with np.nan, pass in errors='ignore'"</code></pre>
</div>
</div>
<p>How come <code>stats.goals</code> and <code>stats.assists</code> didn’t generate an error but that above does? <strong>Because, the <em>meta</em> argument expects values to be present for listed keys in meta by default.</strong> We can ignore those errors(as suggested) using <code>errors='ignore'</code></p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pd.json_normalize(</span>
<span id="cb30-2">    json_list, </span>
<span id="cb30-3">    record_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>], </span>
<span id="cb30-4">    meta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>]],</span>
<span id="cb30-5">    errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span></span>
<span id="cb30-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">stats.goals</th>
<th data-quarto-table-cell-role="th">stats.assists</th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">colour</th>
<th data-quarto-table-cell-role="th">info.staff.physio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Viv</td>
<td>F</td>
<td>101.0</td>
<td>40.0</td>
<td>arsenal</td>
<td>red-white</td>
<td>xxxx</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Beth</td>
<td>F</td>
<td>60.0</td>
<td>25.0</td>
<td>arsenal</td>
<td>red-white</td>
<td>xxxx</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Steph</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
<td>city</td>
<td>blue</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Lucy</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
<td>city</td>
<td>blue</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="custom-separator-sep" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="custom-separator-sep"><span class="header-section-number">5</span> Custom separator <code>sep</code></h2>
<p>We notice that by default pandas uses <code>.</code> to indicate the direction of the path. We can change that using the <code>sep</code> argument.</p>
<blockquote class="blockquote">
<p><strong>Tip</strong>: Usually an <code>underscore</code> is used instead of <code>.</code></p>
</blockquote>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">json_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb31-2">    { </span>
<span id="cb31-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'arsenal'</span>, </span>
<span id="cb31-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red-white'</span>,</span>
<span id="cb31-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>: {</span>
<span id="cb31-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>: { </span>
<span id="cb31-7">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xxxx'</span>, </span>
<span id="cb31-8">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'doctor'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yyyy'</span> </span>
<span id="cb31-9">            }</span>
<span id="cb31-10">        },</span>
<span id="cb31-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>: [</span>
<span id="cb31-12">            { </span>
<span id="cb31-13">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Viv'</span>, </span>
<span id="cb31-14">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>, </span>
<span id="cb31-15">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>: { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> } </span>
<span id="cb31-16">            },</span>
<span id="cb31-17">            { </span>
<span id="cb31-18">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Beth'</span>, </span>
<span id="cb31-19">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span>, </span>
<span id="cb31-20">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'stats'</span>: { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'goals'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assists'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> } </span>
<span id="cb31-21">            },</span>
<span id="cb31-22">        ]</span>
<span id="cb31-23">    },</span>
<span id="cb31-24">    { </span>
<span id="cb31-25">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'city'</span>, </span>
<span id="cb31-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>,</span>
<span id="cb31-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>: {</span>
<span id="cb31-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>: { </span>
<span id="cb31-29">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaa'</span>, </span>
<span id="cb31-30">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'doctor'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbbb'</span> </span>
<span id="cb31-31">            }</span>
<span id="cb31-32">        },</span>
<span id="cb31-33">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>: [</span>
<span id="cb31-34">            { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Steph'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span> },</span>
<span id="cb31-35">            { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lucy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sex'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span> },</span>
<span id="cb31-36">        ]</span>
<span id="cb31-37">    },</span>
<span id="cb31-38">]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">pd.json_normalize(</span>
<span id="cb32-2">    json_list, </span>
<span id="cb32-3">    record_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>], </span>
<span id="cb32-4">    meta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>]],</span>
<span id="cb32-5">    sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-&gt;'</span></span>
<span id="cb32-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">sex</th>
<th data-quarto-table-cell-role="th">stats-&gt;goals</th>
<th data-quarto-table-cell-role="th">stats-&gt;assists</th>
<th data-quarto-table-cell-role="th">team</th>
<th data-quarto-table-cell-role="th">colour</th>
<th data-quarto-table-cell-role="th">info-&gt;staff-&gt;physio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Viv</td>
<td>F</td>
<td>101.0</td>
<td>40.0</td>
<td>arsenal</td>
<td>red-white</td>
<td>xxxx</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Beth</td>
<td>F</td>
<td>60.0</td>
<td>25.0</td>
<td>arsenal</td>
<td>red-white</td>
<td>xxxx</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Steph</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
<td>city</td>
<td>blue</td>
<td>aaaa</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Lucy</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
<td>city</td>
<td>blue</td>
<td>aaaa</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="adding-context-to-record-and-meta-data-using-record_prefix-and-meta_prefix" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="adding-context-to-record-and-meta-data-using-record_prefix-and-meta_prefix"><span class="header-section-number">6</span> Adding context to record and meta data using <em>record_prefix</em> and <em>meta_prefix</em></h2>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">pd.json_normalize(</span>
<span id="cb33-2">    json_list, </span>
<span id="cb33-3">    record_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'players'</span>], </span>
<span id="cb33-4">    meta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'team'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colour'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'info'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'staff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'physio'</span>]],</span>
<span id="cb33-5">    meta_prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'meta-'</span>,</span>
<span id="cb33-6">    record_prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'player-'</span>,</span>
<span id="cb33-7">    sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-&gt;'</span></span>
<span id="cb33-8">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">player-name</th>
<th data-quarto-table-cell-role="th">player-sex</th>
<th data-quarto-table-cell-role="th">player-stats-&gt;goals</th>
<th data-quarto-table-cell-role="th">player-stats-&gt;assists</th>
<th data-quarto-table-cell-role="th">meta-team</th>
<th data-quarto-table-cell-role="th">meta-colour</th>
<th data-quarto-table-cell-role="th">meta-info-&gt;staff-&gt;physio</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Viv</td>
<td>F</td>
<td>101.0</td>
<td>40.0</td>
<td>arsenal</td>
<td>red-white</td>
<td>xxxx</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Beth</td>
<td>F</td>
<td>60.0</td>
<td>25.0</td>
<td>arsenal</td>
<td>red-white</td>
<td>xxxx</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Steph</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
<td>city</td>
<td>blue</td>
<td>aaaa</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Lucy</td>
<td>F</td>
<td>NaN</td>
<td>NaN</td>
<td>city</td>
<td>blue</td>
<td>aaaa</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="working-with-a-local-file" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="working-with-a-local-file"><span class="header-section-number">7</span> Working with a local file</h2>
<p>In most scenarios, we won’t be making new JSON object ourselves instead use JSON formatted files. We make use python’s <code>json</code> module and read the file, then use pandas’ <code>json_normalize</code> to flatten it into a dataframe.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load data using Python JSON module</span></span>
<span id="cb34-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'movies.json'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb34-4">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(f)</span>
<span id="cb34-5">    </span>
<span id="cb34-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalizing data</span></span>
<span id="cb34-7">pd.json_normalize(data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Title</th>
<th data-quarto-table-cell-role="th">US Gross</th>
<th data-quarto-table-cell-role="th">Worldwide Gross</th>
<th data-quarto-table-cell-role="th">US DVD Sales</th>
<th data-quarto-table-cell-role="th">Production Budget</th>
<th data-quarto-table-cell-role="th">Release Date</th>
<th data-quarto-table-cell-role="th">MPAA Rating</th>
<th data-quarto-table-cell-role="th">Running Time min</th>
<th data-quarto-table-cell-role="th">Distributor</th>
<th data-quarto-table-cell-role="th">Source</th>
<th data-quarto-table-cell-role="th">Major Genre</th>
<th data-quarto-table-cell-role="th">Creative Type</th>
<th data-quarto-table-cell-role="th">Director</th>
<th data-quarto-table-cell-role="th">Rotten Tomatoes Rating</th>
<th data-quarto-table-cell-role="th">IMDB Rating</th>
<th data-quarto-table-cell-role="th">IMDB Votes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>The Land Girls</td>
<td>146083</td>
<td>146083</td>
<td>NaN</td>
<td>8000000</td>
<td>Jun 12 1998</td>
<td>R</td>
<td>NaN</td>
<td>Gramercy</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>NaN</td>
<td>6.1</td>
<td>1071.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>First Love, Last Rites</td>
<td>10876</td>
<td>10876</td>
<td>NaN</td>
<td>300000</td>
<td>Aug 07 1998</td>
<td>R</td>
<td>NaN</td>
<td>Strand</td>
<td>None</td>
<td>Drama</td>
<td>None</td>
<td>None</td>
<td>NaN</td>
<td>6.9</td>
<td>207.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>I Married a Strange Person</td>
<td>203134</td>
<td>203134</td>
<td>NaN</td>
<td>250000</td>
<td>Aug 28 1998</td>
<td>None</td>
<td>NaN</td>
<td>Lionsgate</td>
<td>None</td>
<td>Comedy</td>
<td>None</td>
<td>None</td>
<td>NaN</td>
<td>6.8</td>
<td>865.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Four Rooms</td>
<td>4301000</td>
<td>4301000</td>
<td>NaN</td>
<td>4000000</td>
<td>Dec 25 1995</td>
<td>R</td>
<td>NaN</td>
<td>Miramax</td>
<td>Original Screenplay</td>
<td>Comedy</td>
<td>Contemporary Fiction</td>
<td>Robert Rodriguez</td>
<td>14.0</td>
<td>6.4</td>
<td>34328.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>The Four Seasons</td>
<td>42488161</td>
<td>42488161</td>
<td>NaN</td>
<td>6500000</td>
<td>May 22 1981</td>
<td>None</td>
<td>NaN</td>
<td>Universal</td>
<td>Original Screenplay</td>
<td>Comedy</td>
<td>Contemporary Fiction</td>
<td>Alan Alda</td>
<td>71.0</td>
<td>7.0</td>
<td>1814.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">63</td>
<td>Big Things</td>
<td>0</td>
<td>0</td>
<td>NaN</td>
<td>50000</td>
<td>Dec 31 2009</td>
<td>None</td>
<td>NaN</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">64</td>
<td>Bogus</td>
<td>4357406</td>
<td>4357406</td>
<td>NaN</td>
<td>32000000</td>
<td>Sep 06 1996</td>
<td>PG</td>
<td>NaN</td>
<td>Warner Bros.</td>
<td>Original Screenplay</td>
<td>Comedy</td>
<td>Fantasy</td>
<td>Norman Jewison</td>
<td>40.0</td>
<td>4.8</td>
<td>2742.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">65</td>
<td>Beverly Hills Cop</td>
<td>234760478</td>
<td>316300000</td>
<td>NaN</td>
<td>15000000</td>
<td>Dec 05 1984</td>
<td>None</td>
<td>NaN</td>
<td>Paramount Pictures</td>
<td>Original Screenplay</td>
<td>Action</td>
<td>Contemporary Fiction</td>
<td>Martin Brest</td>
<td>83.0</td>
<td>7.3</td>
<td>45065.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">66</td>
<td>Beverly Hills Cop II</td>
<td>153665036</td>
<td>276665036</td>
<td>NaN</td>
<td>20000000</td>
<td>May 20 1987</td>
<td>R</td>
<td>NaN</td>
<td>Paramount Pictures</td>
<td>Original Screenplay</td>
<td>Action</td>
<td>Contemporary Fiction</td>
<td>Tony Scott</td>
<td>46.0</td>
<td>6.1</td>
<td>29712.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">67</td>
<td>Beverly Hills Cop III</td>
<td>42586861</td>
<td>119180938</td>
<td>NaN</td>
<td>50000000</td>
<td>May 25 1994</td>
<td>R</td>
<td>NaN</td>
<td>Paramount Pictures</td>
<td>Original Screenplay</td>
<td>Action</td>
<td>Contemporary Fiction</td>
<td>John Landis</td>
<td>10.0</td>
<td>5.0</td>
<td>21199.0</td>
</tr>
</tbody>
</table>

<p>68 rows × 16 columns</p>
</div>
</div>
</div>
</section>
<section id="working-with-url" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="working-with-url"><span class="header-section-number">8</span> Working with URL</h2>
<p>Reading a JSON file from an url needs an extra module in <code>requests</code> as any data from the Internet carries overheads that are necessary for efficient exchange of information(REST API). So, in order to read the file contents, we call upon <em>requests’</em> <code>text</code> attribute which fetches the contents of the file.</p>
<p>Here, we use <code>json.loads</code> and not <code>json.load</code> as <code>loads</code> function expects contents(string) rather than a file pointer. If looked closely into the <code>json</code> module, the <code>load</code> calls <code>loads</code> using <code>read()</code> on the file.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb35-2"></span>
<span id="cb35-3">URL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://vega.github.io/vega-datasets/data/cars.json'</span></span>
<span id="cb35-4"></span>
<span id="cb35-5">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(requests.get(URL).text)</span>
<span id="cb35-6">pd.json_normalize(data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Name</th>
<th data-quarto-table-cell-role="th">Miles_per_Gallon</th>
<th data-quarto-table-cell-role="th">Cylinders</th>
<th data-quarto-table-cell-role="th">Displacement</th>
<th data-quarto-table-cell-role="th">Horsepower</th>
<th data-quarto-table-cell-role="th">Weight_in_lbs</th>
<th data-quarto-table-cell-role="th">Acceleration</th>
<th data-quarto-table-cell-role="th">Year</th>
<th data-quarto-table-cell-role="th">Origin</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>chevrolet chevelle malibu</td>
<td>18.0</td>
<td>8</td>
<td>307.0</td>
<td>130.0</td>
<td>3504</td>
<td>12.0</td>
<td>1970-01-01</td>
<td>USA</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>buick skylark 320</td>
<td>15.0</td>
<td>8</td>
<td>350.0</td>
<td>165.0</td>
<td>3693</td>
<td>11.5</td>
<td>1970-01-01</td>
<td>USA</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>plymouth satellite</td>
<td>18.0</td>
<td>8</td>
<td>318.0</td>
<td>150.0</td>
<td>3436</td>
<td>11.0</td>
<td>1970-01-01</td>
<td>USA</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>amc rebel sst</td>
<td>16.0</td>
<td>8</td>
<td>304.0</td>
<td>150.0</td>
<td>3433</td>
<td>12.0</td>
<td>1970-01-01</td>
<td>USA</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>ford torino</td>
<td>17.0</td>
<td>8</td>
<td>302.0</td>
<td>140.0</td>
<td>3449</td>
<td>10.5</td>
<td>1970-01-01</td>
<td>USA</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">401</td>
<td>ford mustang gl</td>
<td>27.0</td>
<td>4</td>
<td>140.0</td>
<td>86.0</td>
<td>2790</td>
<td>15.6</td>
<td>1982-01-01</td>
<td>USA</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">402</td>
<td>vw pickup</td>
<td>44.0</td>
<td>4</td>
<td>97.0</td>
<td>52.0</td>
<td>2130</td>
<td>24.6</td>
<td>1982-01-01</td>
<td>Europe</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">403</td>
<td>dodge rampage</td>
<td>32.0</td>
<td>4</td>
<td>135.0</td>
<td>84.0</td>
<td>2295</td>
<td>11.6</td>
<td>1982-01-01</td>
<td>USA</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">404</td>
<td>ford ranger</td>
<td>28.0</td>
<td>4</td>
<td>120.0</td>
<td>79.0</td>
<td>2625</td>
<td>18.6</td>
<td>1982-01-01</td>
<td>USA</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">405</td>
<td>chevy s-10</td>
<td>31.0</td>
<td>4</td>
<td>119.0</td>
<td>82.0</td>
<td>2720</td>
<td>19.4</td>
<td>1982-01-01</td>
<td>USA</td>
</tr>
</tbody>
</table>

<p>406 rows × 9 columns</p>
</div>
</div>
</div>
</section>
<section id="conclusion" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="conclusion"><span class="header-section-number">9</span> Conclusion</h2>
<p>We saw the use of <code>json_normalize</code> function in pandas library. It helps take a JSON data, flatten it, and make it as a dataframe for easier analysis.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>B. Chen, https://towardsdatascience.com/all-pandas-json-normalize-you-should-know-for-flattening-json-13eae1dfb7dd↩︎</p></li>
<li id="fn2"><p>Pandas documentation, https://pandas.pydata.org/pandas-docs/version/1.2.0/reference/api/pandas.json_normalize.html↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>pandas</category>
  <category>json</category>
  <category>jupyter</category>
  <guid>https://dr563105.github.io/posts/2022-09-24-using-json-normalize/index.html</guid>
  <pubDate>Sat, 24 Sep 2022 00:00:00 GMT</pubDate>
  <media:content url="https://dr563105.github.io/posts/2022-09-24-using-json-normalize/pandas-logo.png" medium="image" type="image/png" height="54" width="144"/>
</item>
<item>
  <title>Manage dotfiles with GNU Stow</title>
  <dc:creator>Deepak Ramani</dc:creator>
  <link>https://dr563105.github.io/posts/2022-01-09-dotfiles/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-8HL173849C"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8HL173849C');
</script>




<p>In this post, I will try to guide in organise your dotfiles in the cloud and manage them using GNU Stow.</p>
<section id="what-are-dotfiles" class="level2">
<h2 class="anchored" data-anchor-id="what-are-dotfiles">What are dotfiles?</h2>
<p>For a casual user, the term <em>dotfiles</em> may sound strange and confusing but it is nothing but application(app) configuration files in <em>developer</em> talk. The apps generally refer to certain files to configure itself.</p>
<p>People usually store these files in a remote location such as a Github repository and retrieve them when needed.</p>
<p>Dotfiles allow personalisation. They can be restored in a new machine saving time. Preparing and organising the dotfiles with some initial effort, help developers save a lot of <strong>time</strong> later.</p>
<p>A few examples of dotfiles are <em>.bashrc</em>, <em>.vimrc</em>, <em>.gitignore</em>.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Pay attention to personal information inside these files. Never store secure keys, passwords in public domains.</p>
</div>
</div>
<!-- {% include alert.html text="Warning: Pay attention to personal information inside these
files. Never store secure keys, passwords in public domains." %} -->
<section id="things-to-know" class="level3">
<h3 class="anchored" data-anchor-id="things-to-know">Things to know</h3>
<ul>
<li>Which app’s config files need to stored.</li>
<li>Where do those config files are located.</li>
</ul>
</section>
<section id="common-config-files-that-need-storing" class="level3">
<h3 class="anchored" data-anchor-id="common-config-files-that-need-storing">Common config files that need storing</h3>
<ul>
<li><code>.bashrc</code> or <code>.zshrc</code></li>
<li><code>.vimrc</code> or <code>init.vim</code>(in the case of neovim)</li>
<li><code>.gitignore_global</code> and <code>.gitconfig</code></li>
<li>Terminal emulator config files</li>
<li>IDE of choice config files</li>
<li>Anyother config you want to save</li>
</ul>
<p>In fact, if there is an app that you have configured heavily and frequently use, its config files must be stored. In the case the said app doesn’t allow exporting of configurations, it is highly recommended to move onto one that allows it.</p>
</section>
<section id="where-are-most-required-dotfiles-located" class="level3">
<h3 class="anchored" data-anchor-id="where-are-most-required-dotfiles-located">Where are most required dotfiles located?</h3>
<p>Most files are present in <code>$HOME</code> or <code>$XDG_CONFIG_HOME</code> directories. <code>$XDG_CONFIG_HOME</code> defines the base directory relative to which user-specific configuration files should be stored. If <code>$XDG_CONFIG_HOME</code> is either not set or empty, a default equal to <code>$HOME/.config</code> should be used.</p>
</section>
</section>
<section id="gnu-stow" class="level2">
<h2 class="anchored" data-anchor-id="gnu-stow">GNU Stow</h2>
<p>Some prominent results when googled for storing dotfiles are <a href="https://www.atlassian.com/git/tutorials/dotfiles">this Atlassian tutorial</a> and using <a href="https://yadm.io/"><em>yadm</em></a>. However, I found those harder to get started.</p>
<p><a href="https://www.gnu.org/software/stow/">GNU Stow</a> on the other hand is an easy-to-use symlink farm manager. As described in their website, it takes distinct packages of software and/or data located in separate directories on the filesystem, and makes them appear to be installed in the same place.</p>
<p>This strategy works brilliantly for dotfiles. Borrowing explanation from <a href="http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html">Brandon Invergo’s article</a>:</p>
<blockquote class="blockquote">
<p>The procedure is simple. I created the <code>${HOME}/dotfiles</code> directory and then inside it I made subdirectories for all the programs whose configurations I wanted to manage. Inside each of those directories, I moved in all the appropriate files, maintaining the directory structure of my home directory. So, if a file normally resides at the top level of your home directory, it would go into the top level of the program’s subdirectory. If a file normally goes in the default <code>${XDG_CONFIG_HOME}/${PKGNAME}</code> location <code>(${HOME}/.config/${PKGNAME})</code>, then it would instead go in <code>${HOME}/dotfiles/${PKGNAME}/.config/${PKGNAME}</code> and so on.</p>
</blockquote>
<section id="install-stow" class="level3">
<h3 class="anchored" data-anchor-id="install-stow">Install Stow</h3>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1">1</button><span id="annotated-cell-1-1" class="code-annotation-target"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt stow</span>
<span id="annotated-cell-1-2"></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2">2</button><span id="annotated-cell-1-3" class="code-annotation-target"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install stow</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-annotation="1" data-code-cell="annotated-cell-1" data-code-lines="1">Ubuntu</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-annotation="2" data-code-cell="annotated-cell-1" data-code-lines="3">Homebrew Mac</span>
</dd>
</dl>
</section>
<section id="placing-the-files" class="level3">
<h3 class="anchored" data-anchor-id="placing-the-files">Placing the files</h3>
<p>Now, it might look complex at first. Let me explain with some examples. - <code>.bashrc</code> or <code>.zshrc</code> are present/needed in <code>$HOME</code> directory, so inside <code>$HOME/dotfiles</code> create a subdirectory with <code>bashrc</code> or <code>zshrc</code> and place the original <code>.bashrc</code> or <code>.zshrc</code> file appropriately inside their folder. GNU Stow understands that the dotfile, when symlinked, will create a symlink-copy in the <code>$HOME</code> directory. For future modifications, file in either locations can be edited. But for simplicity, use <code>$HOME/dotfiles</code> directory. - A complicated example would be a config file located deep inside subfolders: nvim’s or neovim’s <code>init.vim</code> or <code>init.lua</code> file. It is present in <code>$HOME/.config/nvim/init.vim</code>. For Stow to understand, it must be placed like this – <code>$HOME/dotfiles/nvim/.config/nvim/init.vim</code></p>
<p>For further reading, I recommend brilliantly written Jake Weisler’s <a href="https://www.jakewiesler.com/blog/managing-dotfiles#understanding-stow">post</a> on GNU Stow.</p>
</section>
<section id="useful-stow-commands" class="level3">
<h3 class="anchored" data-anchor-id="useful-stow-commands">Useful Stow commands</h3>
<p>If correctly installed, then running the command <code>stow --help</code> should list options to use Stow. Most used commands are</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><button class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1">1</button><span id="annotated-cell-2-1" class="code-annotation-target"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stow</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>packagename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="2">2</button><span id="annotated-cell-2-2" class="code-annotation-target"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stow</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>packagename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="3">3</button><span id="annotated-cell-2-3" class="code-annotation-target"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stow</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-D</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>packagename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="4">4</button><span id="annotated-cell-2-4" class="code-annotation-target"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stow</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-R</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>packagename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-annotation="1" data-code-cell="annotated-cell-2" data-code-lines="1">activates symlink</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="2">2</dt>
<dd>
<span data-code-annotation="2" data-code-cell="annotated-cell-2" data-code-lines="2">trial runs or simulates symlink generation. Effective for checking for errors</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="3">3</dt>
<dd>
<span data-code-annotation="3" data-code-cell="annotated-cell-2" data-code-lines="3">delete stowed package</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="4">4</dt>
<dd>
<span data-code-annotation="4" data-code-cell="annotated-cell-2" data-code-lines="4">restows package</span>
</dd>
</dl>
</section>
<section id="activating-stow" class="level3">
<h3 class="anchored" data-anchor-id="activating-stow">Activating Stow</h3>
<p>So if we have created three subdirectories inside dotfiles say <code>zsh</code>, <code>git</code>, <code>nvim</code>, then</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">stow</span> bash git nvim</span></code></pre></div>
</div>
<p>will activate their symlinks.</p>
<p>If returned to <code>$HOME</code> and <code>$XDG_CONFIG_HOME</code> and verified, then we will see,</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.gitconfig</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .dotfiles/git/.gitconfig</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">.zshrc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> .dotfiles/zsh/.zshrc</span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nvim</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ../.dotfiles/nvim/.config/nvim</span></code></pre></div>
</div>
<p>The most awesome thing in all this is, the directory structure needs to be created only once. For future requirement, one simply clones the dotfiles directory and activates symlinks.</p>
</section>
</section>
<section id="storing-files-in-git" class="level2">
<h2 class="anchored" data-anchor-id="storing-files-in-git">Storing files in Git</h2>
<p>The dotfiles directory now becomes important to store in a remote location for safe keeping. Usually a git repository is the preferred method. For instructions on how to use git, look up various tutorials on Git in the internet.</p>
<p>In summary, I have written a short, albeit technical write up on GNU Stow, and its uses for storing dotfiles. Feel free to ask questions in the comments or via various means linked in the blog.</p>


</section>

 ]]></description>
  <category>dotfiles</category>
  <category>GNU stow</category>
  <category>setup-dev-env</category>
  <guid>https://dr563105.github.io/posts/2022-01-09-dotfiles/index.html</guid>
  <pubDate>Sun, 09 Jan 2022 00:00:00 GMT</pubDate>
  <media:content url="https://dr563105.github.io/posts/2022-01-09-dotfiles/gnu-logo.png" medium="image" type="image/png" height="52" width="144"/>
</item>
<item>
  <title>Setting up Kaggle on Linux/Mac</title>
  <dc:creator>Deepak Ramani</dc:creator>
  <link>https://dr563105.github.io/posts/2021-09-18-kaggle-setup/index.html</link>
  <description><![CDATA[ 
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-8HL173849C"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8HL173849C');
</script>




<p>Most of latest data science innovations happen at <a href="https://www.kaggle.com">Kaggle</a>. Kaggle hosts, in addtion to competitions, a large collection of datasets from various fields. The easiest way to interact with Kaggle is through its public API via command-line tool(CLI). Setting it up outside of Kaggle kernels is one of first tasks. In this post, I will guide you through that process.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Pre-requisite</strong>: Python3(&gt;3.6) and latest pip installed.</p>
</div>
</div>
<!-- > **Pre-requisite**: Python3(>3.6) and latest pip installed. -->
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--user</span> kaggle</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Tip</strong>: Install <code>kaggle</code> package inside your conda ML development environment rather than outside of it or in base env.</p>
</div>
</div>
<!-- > **Tip**: Install `kaggle` package inside your conda ML development environment rather than outside of it or in base env. -->
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Don’t do <code>sudo pip install kaggle</code> as it would require admin privileges for every run.</p>
</div>
</div>
<!-- > **Warning**: Don't do `sudo pip install kaggle` as it would require admin privileges for every run. -->
</section>
<section id="download-api-token" class="level2">
<h2 class="anchored" data-anchor-id="download-api-token">Download API token</h2>
<ol type="1">
<li>Create/login into your kaggle account.</li>
<li>From the site header, click on your user profile picture and select Account. You will be land on your profile with account tab active.</li>
<li>Scroll down to API section. Click <code>Create New API Token</code>. A <code>json</code> file will be downloaded your default download directory.</li>
</ol>
</section>
<section id="move-.json-file-to-the-correct-location" class="level2">
<h2 class="anchored" data-anchor-id="move-.json-file-to-the-correct-location">Move .json file to the correct location</h2>
<ol type="1">
<li>Move it to <code>.kaggle</code> in the home directory. Create if absent.</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> ~/.kaggle</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/kaggle.json ~/.kaggle/kaggle.json</span></code></pre></div>
</div>
<ol type="1">
<li>For your security, ensure that other users of your computer do not have read access to your credentials. On Unix-based systems you can do this with the following command:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 ~/.kaggle/kaggle.json</span></code></pre></div>
</div>
<ol type="1">
<li>Restart the terminal and navigate to the env where kaggle package is installed if necessary.</li>
</ol>
</section>
<section id="check-if-it-is-properly-installed" class="level2">
<h2 class="anchored" data-anchor-id="check-if-it-is-properly-installed">Check if it is properly installed</h2>
<ol type="1">
<li>Run:</li>
</ol>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$python</span></span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span>import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kaggle</span></span></code></pre></div>
</div>
<p>Importing kaggle shouldn’t return an error. If there is error, check whether you’re in the right env where kaggle is installed.</p>
<p>If no error, exit the shell and type the following command in the terminal.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kaggle</span> competitions list</span></code></pre></div>
</div>
<p>If installed properly, the command will list all the entered competitions. 1. If not, the binary path may be incorrect. Usually it is installed in <code>~/.local/bin</code> Try using</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~/.local/bin/kaggle</span> competitions list</span></code></pre></div>
</div>
<ol type="1">
<li>If the above command works, export that binary path to the shell environment(<em>bashrc</em>) so that you might use just <code>kaggle</code> next time.</li>
</ol>
</section>
<section id="api-usage" class="level2">
<h2 class="anchored" data-anchor-id="api-usage">API usage</h2>
<p>It is time to use the Kaggle API. For example, to see what dataset command offers, in the CLI enter</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Terminal</strong></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">kaggle</span> dataset <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--help</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Tip</strong>: Remember to comply with competition’s terms and conditions before downloading the dataset. You will get an error <code>forbidden</code> if you try to download before agreeing.</p>
</div>
</div>
<p>For more info on the API, Kaggle’s <a href="https://github.com/Kaggle/kaggle-api#commands">github</a> page is an excellent resource.</p>


</section>

 ]]></description>
  <category>kaggle</category>
  <category>markdown</category>
  <guid>https://dr563105.github.io/posts/2021-09-18-kaggle-setup/index.html</guid>
  <pubDate>Sat, 18 Sep 2021 00:00:00 GMT</pubDate>
  <media:content url="https://dr563105.github.io/posts/2021-09-18-kaggle-setup/kaggle.png" medium="image" type="image/png" height="63" width="144"/>
</item>
</channel>
</rss>
