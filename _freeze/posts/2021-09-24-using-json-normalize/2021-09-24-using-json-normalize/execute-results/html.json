{
  "hash": "6de29e533c44bf1e5825f21f7deee53c",
  "result": {
    "markdown": "---\ntitle: Using json_normalize Pandas function\ndescription: A tutorial with examples on flattening JSON object using json_normalize pandas function\ndate: '2021-09-24'\nimage: pandas-logo.png\ncategories:\n  - pandas\n  - json\n  - jupyter\n---\n\n**J**ava**s**cript **O**bject **N**otation(JSON) is a widely used format for storing and exchanging data. Coming from the relational database, it could be difficult to understand NoSQL databases that use JSON to store data and similarly REST API's response. JSON is also used in storing football event data. It allows easy addition of features in the future. \n\nThough JSON format allows for easier exchange of data, for analysis, a tabular form would be appropriate. A JSON structure can be of two forms: a JSON object and list of JSON objects. Since our programming language of choice is Python, those structures can be somewhat called as a dictionary object or list of dicts.  \n\n![](jsonobjectimage.png \"source: B. Chen, https://towardsdatascience.com/all-pandas-json-normalize-you-should-know-for-flattening-json-13eae1dfb7dd\")\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#hide\n#![](jsonobjectimage.png \"source: {% cite pandas_json %}\")\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#hide\n#source: B. Chen, https://towardsdatascience.com/all-pandas-json-normalize-you-should-know-for-flattening-json-13eae1dfb7dd\n```\n:::\n\n\nImporting pandas library\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n## 1. Flattening a simple JSON \nA dict\n\nLet us consider a simple dictionary: 3 keys and their respective values.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nviv = {\n    \"player_id\" : 15623, \n    \"player_name\" : \"Vivianne Miedema\", \n    \"jersey_number\" : 11}\nviv\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n{'player_id': 15623, 'player_name': 'Vivianne Miedema', 'jersey_number': 11}\n```\n:::\n:::\n\n\nWe use the `json_normalize` API to flatten a JSON dict.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n#hide\n#We use the `json_normalize` API{% cite json_normalize %} to flatten a JSON dict.\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf = pd.json_normalize(viv);df\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>player_name</th>\n      <th>jersey_number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15623</td>\n      <td>Vivianne Miedema</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1 entries, 0 to 0\nData columns (total 3 columns):\n #   Column         Non-Null Count  Dtype \n---  ------         --------------  ----- \n 0   player_id      1 non-null      int64 \n 1   player_name    1 non-null      object\n 2   jersey_number  1 non-null      int64 \ndtypes: int64(2), object(1)\nmemory usage: 152.0+ bytes\n```\n:::\n:::\n\n\n> **Side Note**: \nIf the data contains something that is not compatible with python, in this case a `null` variable, there are two choices:\n\n>   - Change `null` to `None`\n>   - Pass the data through `json.loads` function\n\n**Change `null` to `None`**\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nnull = None\nviv1 = { \"player_id\" : 15623, \"player_name\" : \"Vivianne Miedema\", \"jersey_number\" : 11, \"player_nickname\" : null}\nviv1\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n{'player_id': 15623,\n 'player_name': 'Vivianne Miedema',\n 'jersey_number': 11,\n 'player_nickname': None}\n```\n:::\n:::\n\n\n**Make data as string and pass to `json.loads`**\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nimport json\nviv1 = '{ \"player_id\" : 15623, \"player_name\" : \"Vivianne Miedema\", \"jersey_number\" : 11, \"player_nickname\" : null}'\nviv1 = json.loads(viv1)\nviv1\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n{'player_id': 15623,\n 'player_name': 'Vivianne Miedema',\n 'jersey_number': 11,\n 'player_nickname': None}\n```\n:::\n:::\n\n\n### A list of dicts\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nplayer_list = [\n    { \"player_id\" : 15623, \"player_name\" : \"Vivianne Miedema\", \"jersey_number\" : 11, \"player_nickname\" : null },\n    { \"player_id\" : 10658, \"player_name\" : \"Danielle van de Donk\", \"jersey_number\" : 7, \"player_nickname\" : null }\n]\npd.json_normalize(player_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>player_name</th>\n      <th>jersey_number</th>\n      <th>player_nickname</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15623</td>\n      <td>Vivianne Miedema</td>\n      <td>11</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10658</td>\n      <td>Danielle van de Donk</td>\n      <td>7</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe have the JSON list of dicts in a tabular form. All the keys become columns and their values as entries. \n\nWhen we flattern a list with a key-value pair missing for an entry, instead of an error, **NaN**(not a number) is stored.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nplayer_list = [\n    { \"player_id\" : 15623, \"player_name\" : \"Vivianne Miedema\", \"jersey_number\" : 11, \"player_nickname\" : null },\n    { \"player_id\" : 10658, \"player_name\" : \"Danielle van de Donk\"}\n]\npd.json_normalize(player_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_id</th>\n      <th>player_name</th>\n      <th>jersey_number</th>\n      <th>player_nickname</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15623</td>\n      <td>Vivianne Miedema</td>\n      <td>11.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10658</td>\n      <td>Danielle van de Donk</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n**Note**: See how `player_nickname` when not specified also turns to **NaN** from **None**.\n\n\n## 2. Flattening a multi-level JSON\n\n\n### A simple dict\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nat_kick0ff = {\n  \"id\":\"d712fb93-c464-4621-98ba-f2bdcd5641db\",\n  \"timestamp\":\"00:00:00.000\",\n  \"duration\":0.0,\n  \"lineup\":{\n      \"player\":{\n        \"id\":15623,\n        \"name\":\"Vivianne Miedema\"\n      },\n      \"position\":{\n        \"id\":23,\n        \"name\":\"Center Forward\"\n      },\n      \"jersey_number\":11\n    }\n}\nat_kick0ff\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n{'id': 'd712fb93-c464-4621-98ba-f2bdcd5641db',\n 'timestamp': '00:00:00.000',\n 'duration': 0.0,\n 'lineup': {'player': {'id': 15623, 'name': 'Vivianne Miedema'},\n  'position': {'id': 23, 'name': 'Center Forward'},\n  'jersey_number': 11}}\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\npd.json_normalize(at_kick0ff)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>timestamp</th>\n      <th>duration</th>\n      <th>lineup.player.id</th>\n      <th>lineup.player.name</th>\n      <th>lineup.position.id</th>\n      <th>lineup.position.name</th>\n      <th>lineup.jersey_number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>d712fb93-c464-4621-98ba-f2bdcd5641db</td>\n      <td>00:00:00.000</td>\n      <td>0.0</td>\n      <td>15623</td>\n      <td>Vivianne Miedema</td>\n      <td>23</td>\n      <td>Center Forward</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nYou can see that *lineup* dictionary key's nested key-value pairs have been expanded into individual columns. If you feel that is unnecessary, we can restrict expansion by using *max_level* argument. With `max_level=1`, the flattening goes one level deeper.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\npd.json_normalize(at_kick0ff, max_level=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>timestamp</th>\n      <th>duration</th>\n      <th>lineup.player</th>\n      <th>lineup.position</th>\n      <th>lineup.jersey_number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>d712fb93-c464-4621-98ba-f2bdcd5641db</td>\n      <td>00:00:00.000</td>\n      <td>0.0</td>\n      <td>{'id': 15623, 'name': 'Vivianne Miedema'}</td>\n      <td>{'id': 23, 'name': 'Center Forward'}</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### A list of dicts\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nfirst_pass = [\n  {\n    \"id\":\"15758edb-58cd-49c4-a817-d2ef48ba3bcf\",\n    \"timestamp\":\"00:00:00.504\",\n    \"type\":{\n      \"id\":30,\n      \"name\":\"Pass\"\n    },\n    \"play_pattern\":{\n      \"id\":9,\n      \"name\":\"From Kick Off\"\n    },\n    \"player\":{\n      \"id\":15623,\n      \"name\":\"Vivianne Miedema\"\n    },\n    \"pass\":{\n      \"recipient\":{\n        \"id\":10666,\n        \"name\":\"Dominique Johanna Anna Bloodworth\"\n      },\n      \"length\":25.455845,\n      \"angle\":-2.3561945,\n      \"height\":{\n        \"id\":1,\n        \"name\":\"Ground Pass\"\n      },\n      \"end_location\":[\n        42.0,\n        22.0\n      ]\n    }\n  }, {\n  \"id\" : \"ab5674a4-e824-4143-9f6f-3f1645557413\",\n  \"timestamp\" : \"00:00:04.201\",\n  \"type\" : {\n    \"id\" : 30,\n    \"name\" : \"Pass\"\n  },\n  \"play_pattern\" : {\n    \"id\" : 9,\n    \"name\" : \"From Kick Off\"\n  },\n  \"player\" : {\n    \"id\" : 10666,\n    \"name\" : \"Dominique Johanna Anna Bloodworth\"\n  },\n  \"location\" : [ 45.0, 29.0 ],\n  \"duration\" : 1.795201,\n  \"pass\" : {\n    \"length\" : 51.62364,\n    \"angle\" : 0.55038595,\n    \"height\" : {\n      \"id\" : 3,\n      \"name\" : \"High Pass\"\n    },\n    \"end_location\" : [ 89.0, 56.0 ]\n  }\n}\n]\n    \npd.json_normalize(first_pass)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>timestamp</th>\n      <th>type.id</th>\n      <th>type.name</th>\n      <th>play_pattern.id</th>\n      <th>play_pattern.name</th>\n      <th>player.id</th>\n      <th>player.name</th>\n      <th>pass.recipient.id</th>\n      <th>pass.recipient.name</th>\n      <th>pass.length</th>\n      <th>pass.angle</th>\n      <th>pass.height.id</th>\n      <th>pass.height.name</th>\n      <th>pass.end_location</th>\n      <th>location</th>\n      <th>duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15758edb-58cd-49c4-a817-d2ef48ba3bcf</td>\n      <td>00:00:00.504</td>\n      <td>30</td>\n      <td>Pass</td>\n      <td>9</td>\n      <td>From Kick Off</td>\n      <td>15623</td>\n      <td>Vivianne Miedema</td>\n      <td>10666.0</td>\n      <td>Dominique Johanna Anna Bloodworth</td>\n      <td>25.455845</td>\n      <td>-2.356194</td>\n      <td>1</td>\n      <td>Ground Pass</td>\n      <td>[42.0, 22.0]</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ab5674a4-e824-4143-9f6f-3f1645557413</td>\n      <td>00:00:04.201</td>\n      <td>30</td>\n      <td>Pass</td>\n      <td>9</td>\n      <td>From Kick Off</td>\n      <td>10666</td>\n      <td>Dominique Johanna Anna Bloodworth</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>51.623640</td>\n      <td>0.550386</td>\n      <td>3</td>\n      <td>High Pass</td>\n      <td>[89.0, 56.0]</td>\n      <td>[45.0, 29.0]</td>\n      <td>1.795201</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLimiting the levels...\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\npd.json_normalize(first_pass, max_level=0)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>timestamp</th>\n      <th>type</th>\n      <th>play_pattern</th>\n      <th>player</th>\n      <th>pass</th>\n      <th>location</th>\n      <th>duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>15758edb-58cd-49c4-a817-d2ef48ba3bcf</td>\n      <td>00:00:00.504</td>\n      <td>{'id': 30, 'name': 'Pass'}</td>\n      <td>{'id': 9, 'name': 'From Kick Off'}</td>\n      <td>{'id': 15623, 'name': 'Vivianne Miedema'}</td>\n      <td>{'recipient': {'id': 10666, 'name': 'Dominique...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ab5674a4-e824-4143-9f6f-3f1645557413</td>\n      <td>00:00:04.201</td>\n      <td>{'id': 30, 'name': 'Pass'}</td>\n      <td>{'id': 9, 'name': 'From Kick Off'}</td>\n      <td>{'id': 10666, 'name': 'Dominique Johanna Anna ...</td>\n      <td>{'length': 51.62364, 'angle': 0.55038595, 'hei...</td>\n      <td>[45.0, 29.0]</td>\n      <td>1.795201</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 3. Flattening a JSON nested list\n\n### A simple dict\n\nFor this case, let us consider a simpler example than of football event data. The key `info` has list of dictionaries inside its structure. We call it *nested dict*.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nawfc = {\n    'team': 'AWFC',\n    'location': 'London',\n    'ranking': 1,\n    'info': {\n        'manager': 'Joe',\n        'contacts': {\n          'email': {\n              'coaching': 'joe@afc.com',\n              'general': 'info@afc.com'\n          },\n          'tel': '123456789',\n      }\n    },\n    'players': [\n      { 'name': 'Viv' },\n      { 'name': 'DvD' },\n      { 'name': 'Kim' }\n    ],\n};awfc\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n{'team': 'AWFC',\n 'location': 'London',\n 'ranking': 1,\n 'info': {'manager': 'Joe',\n  'contacts': {'email': {'coaching': 'joe@afc.com', 'general': 'info@afc.com'},\n   'tel': '123456789'}},\n 'players': [{'name': 'Viv'}, {'name': 'DvD'}, {'name': 'Kim'}]}\n```\n:::\n:::\n\n\nThe *players* column has a list of dicts. So, we can flatten that column using *record_path* argument.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npd.json_normalize(awfc, record_path=['players'])\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Viv</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DvD</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Kim</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nBut, making a separate table with no reference id has no meaning. To prevent that we can append revelant columns to the new table using *meta* argument. Here we want their *team* and *Telephone number*. The *tel* key lies within `info->contacts->tel`. So, we need provide that path like so `['info', 'contacts', 'tel']`.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\npd.json_normalize(awfc, record_path=['players'], meta=['team',['info', 'contacts', 'tel']])\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>team</th>\n      <th>info.contacts.tel</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Viv</td>\n      <td>AWFC</td>\n      <td>123456789</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DvD</td>\n      <td>AWFC</td>\n      <td>123456789</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Kim</td>\n      <td>AWFC</td>\n      <td>123456789</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe order in which those paths are mentioned, the order in which those columns are appended.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\npd.json_normalize(awfc, record_path=['players'], meta=['team',['info', 'contacts', 'tel'],['info', 'manager']])\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>team</th>\n      <th>info.contacts.tel</th>\n      <th>info.manager</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Viv</td>\n      <td>AWFC</td>\n      <td>123456789</td>\n      <td>Joe</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>DvD</td>\n      <td>AWFC</td>\n      <td>123456789</td>\n      <td>Joe</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Kim</td>\n      <td>AWFC</td>\n      <td>123456789</td>\n      <td>Joe</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### A list of dicts\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\njson_list = [\n    { \n        'team': 'arsenal', \n        'colour': 'red-white',\n        'info': {\n            'staff': { \n                'physio': 'xxxx', \n                'doctor': 'yyyy' \n            }\n        },\n        'players': [\n            { \n                'name': 'Viv', \n                'sex': 'F', \n                'stats': { 'goals': 101, 'assists': 40 } \n            },\n            { \n                'name': 'Beth', \n                'sex': 'F', \n                'stats': { 'goals': 60, 'assists': 25 } \n            },\n        ]\n    },\n    { \n        'team': 'city', \n        'colour': 'blue',\n        'info': {\n            'staff': { \n                'physio': 'aaaa', \n                'doctor': 'bbbb' \n            }\n        },\n        'players': [\n            { 'name': 'Steph', 'sex': 'F' },\n            { 'name': 'Lucy', 'sex': 'F' },\n        ]\n    },\n]\n\npd.json_normalize(json_list)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>team</th>\n      <th>colour</th>\n      <th>players</th>\n      <th>info.staff.physio</th>\n      <th>info.staff.doctor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>arsenal</td>\n      <td>red-white</td>\n      <td>[{'name': 'Viv', 'sex': 'F', 'stats': {'goals'...</td>\n      <td>xxxx</td>\n      <td>yyyy</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>city</td>\n      <td>blue</td>\n      <td>[{'name': 'Steph', 'sex': 'F'}, {'name': 'Lucy...</td>\n      <td>aaaa</td>\n      <td>bbbb</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\npd.json_normalize(json_list, record_path =['players'])\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>sex</th>\n      <th>stats.goals</th>\n      <th>stats.assists</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Viv</td>\n      <td>F</td>\n      <td>101.0</td>\n      <td>40.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Beth</td>\n      <td>F</td>\n      <td>60.0</td>\n      <td>25.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Steph</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lucy</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHow about we now append the players' team, colour, and their physio.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\npd.json_normalize(\n    json_list, \n    record_path =['players'], \n    meta=['team', 'colour', ['info', 'staff', 'physio']]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>sex</th>\n      <th>stats.goals</th>\n      <th>stats.assists</th>\n      <th>team</th>\n      <th>colour</th>\n      <th>info.staff.physio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Viv</td>\n      <td>F</td>\n      <td>101.0</td>\n      <td>40.0</td>\n      <td>arsenal</td>\n      <td>red-white</td>\n      <td>xxxx</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Beth</td>\n      <td>F</td>\n      <td>60.0</td>\n      <td>25.0</td>\n      <td>arsenal</td>\n      <td>red-white</td>\n      <td>xxxx</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Steph</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>city</td>\n      <td>blue</td>\n      <td>aaaa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lucy</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>city</td>\n      <td>blue</td>\n      <td>aaaa</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 4. Ignoring key errors\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\njson_list = [\n    { \n        'team': 'arsenal', \n        'colour': 'red-white',\n        'info': {\n            'staff': { \n                'physio': 'xxxx', \n                'doctor': 'yyyy' \n            }\n        },\n        'players': [\n            { \n                'name': 'Viv', \n                'sex': 'F', \n                'stats': { 'goals': 101, 'assists': 40 } \n            },\n            { \n                'name': 'Beth', \n                'sex': 'F', \n                'stats': { 'goals': 60, 'assists': 25 } \n            },\n        ]\n    },\n    { \n        'team': 'city', \n        'colour': 'blue',\n        'info': {\n            'staff': { \n                'doctor': 'bbbb' \n            }\n        },\n        'players': [\n            { 'name': 'Steph', 'sex': 'F' },\n            { 'name': 'Lucy', 'sex': 'F' },\n        ]\n    },\n]\n```\n:::\n\n\nNotice that the key *physio* is missing from the entry `team=city`. What happens if we try to access *physio* key inside `meta`?\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\npd.json_normalize(\n    json_list, \n    record_path =['players'], \n    meta=['team', 'colour', ['info', 'staff', 'physio']],\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nKeyError: \"Key 'physio' not found. To replace missing values of 'physio' with np.nan, pass in errors='ignore'\"\n```\n:::\n:::\n\n\nHow come `stats.goals` and `stats.assists` didn't generate an error but that above does? **Because, the *meta* argument expects values to be present for listed keys in meta by default.** We can ignore those errors(as suggested) using `errors='ignore'`\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\npd.json_normalize(\n    json_list, \n    record_path =['players'], \n    meta=['team', 'colour', ['info', 'staff', 'physio']],\n    errors='ignore'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>sex</th>\n      <th>stats.goals</th>\n      <th>stats.assists</th>\n      <th>team</th>\n      <th>colour</th>\n      <th>info.staff.physio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Viv</td>\n      <td>F</td>\n      <td>101.0</td>\n      <td>40.0</td>\n      <td>arsenal</td>\n      <td>red-white</td>\n      <td>xxxx</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Beth</td>\n      <td>F</td>\n      <td>60.0</td>\n      <td>25.0</td>\n      <td>arsenal</td>\n      <td>red-white</td>\n      <td>xxxx</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Steph</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>city</td>\n      <td>blue</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lucy</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>city</td>\n      <td>blue</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 5. Custom separator `sep`\n\nWe notice that by default pandas uses `.` to indicate the direction of the path. We can change that using the `sep` argument.\n\n> **Tip**: Usually an `underscore` is used instead of `.`\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\njson_list = [\n    { \n        'team': 'arsenal', \n        'colour': 'red-white',\n        'info': {\n            'staff': { \n                'physio': 'xxxx', \n                'doctor': 'yyyy' \n            }\n        },\n        'players': [\n            { \n                'name': 'Viv', \n                'sex': 'F', \n                'stats': { 'goals': 101, 'assists': 40 } \n            },\n            { \n                'name': 'Beth', \n                'sex': 'F', \n                'stats': { 'goals': 60, 'assists': 25 } \n            },\n        ]\n    },\n    { \n        'team': 'city', \n        'colour': 'blue',\n        'info': {\n            'staff': { \n                'physio': 'aaaa', \n                'doctor': 'bbbb' \n            }\n        },\n        'players': [\n            { 'name': 'Steph', 'sex': 'F' },\n            { 'name': 'Lucy', 'sex': 'F' },\n        ]\n    },\n]\n```\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\npd.json_normalize(\n    json_list, \n    record_path =['players'], \n    meta=['team', 'colour', ['info', 'staff', 'physio']],\n    sep='->'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>sex</th>\n      <th>stats-&gt;goals</th>\n      <th>stats-&gt;assists</th>\n      <th>team</th>\n      <th>colour</th>\n      <th>info-&gt;staff-&gt;physio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Viv</td>\n      <td>F</td>\n      <td>101.0</td>\n      <td>40.0</td>\n      <td>arsenal</td>\n      <td>red-white</td>\n      <td>xxxx</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Beth</td>\n      <td>F</td>\n      <td>60.0</td>\n      <td>25.0</td>\n      <td>arsenal</td>\n      <td>red-white</td>\n      <td>xxxx</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Steph</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>city</td>\n      <td>blue</td>\n      <td>aaaa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lucy</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>city</td>\n      <td>blue</td>\n      <td>aaaa</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 6. Adding context to record and meta data using *record_prefix* and *meta_prefix*\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\npd.json_normalize(\n    json_list, \n    record_path=['players'], \n    meta=['team', 'colour', ['info', 'staff', 'physio']],\n    meta_prefix='meta-',\n    record_prefix='player-',\n    sep='->'\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player-name</th>\n      <th>player-sex</th>\n      <th>player-stats-&gt;goals</th>\n      <th>player-stats-&gt;assists</th>\n      <th>meta-team</th>\n      <th>meta-colour</th>\n      <th>meta-info-&gt;staff-&gt;physio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Viv</td>\n      <td>F</td>\n      <td>101.0</td>\n      <td>40.0</td>\n      <td>arsenal</td>\n      <td>red-white</td>\n      <td>xxxx</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Beth</td>\n      <td>F</td>\n      <td>60.0</td>\n      <td>25.0</td>\n      <td>arsenal</td>\n      <td>red-white</td>\n      <td>xxxx</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Steph</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>city</td>\n      <td>blue</td>\n      <td>aaaa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lucy</td>\n      <td>F</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>city</td>\n      <td>blue</td>\n      <td>aaaa</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 7. Working with a local file\n\nIn most scenarios, we won't be making new JSON object ourselves instead use JSON formatted files. We make use python's `json` module and read the file, then use pandas' `json_normalize` to flatten it into a dataframe.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nimport json\n# load data using Python JSON module\nwith open('movies.json') as f:\n    data = json.load(f)\n    \n# Normalizing data\npd.json_normalize(data)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Title</th>\n      <th>US Gross</th>\n      <th>Worldwide Gross</th>\n      <th>US DVD Sales</th>\n      <th>Production Budget</th>\n      <th>Release Date</th>\n      <th>MPAA Rating</th>\n      <th>Running Time min</th>\n      <th>Distributor</th>\n      <th>Source</th>\n      <th>Major Genre</th>\n      <th>Creative Type</th>\n      <th>Director</th>\n      <th>Rotten Tomatoes Rating</th>\n      <th>IMDB Rating</th>\n      <th>IMDB Votes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>The Land Girls</td>\n      <td>146083</td>\n      <td>146083</td>\n      <td>NaN</td>\n      <td>8000000</td>\n      <td>Jun 12 1998</td>\n      <td>R</td>\n      <td>NaN</td>\n      <td>Gramercy</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>6.1</td>\n      <td>1071.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>First Love, Last Rites</td>\n      <td>10876</td>\n      <td>10876</td>\n      <td>NaN</td>\n      <td>300000</td>\n      <td>Aug 07 1998</td>\n      <td>R</td>\n      <td>NaN</td>\n      <td>Strand</td>\n      <td>None</td>\n      <td>Drama</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>6.9</td>\n      <td>207.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>I Married a Strange Person</td>\n      <td>203134</td>\n      <td>203134</td>\n      <td>NaN</td>\n      <td>250000</td>\n      <td>Aug 28 1998</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>Lionsgate</td>\n      <td>None</td>\n      <td>Comedy</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>6.8</td>\n      <td>865.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Four Rooms</td>\n      <td>4301000</td>\n      <td>4301000</td>\n      <td>NaN</td>\n      <td>4000000</td>\n      <td>Dec 25 1995</td>\n      <td>R</td>\n      <td>NaN</td>\n      <td>Miramax</td>\n      <td>Original Screenplay</td>\n      <td>Comedy</td>\n      <td>Contemporary Fiction</td>\n      <td>Robert Rodriguez</td>\n      <td>14.0</td>\n      <td>6.4</td>\n      <td>34328.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>The Four Seasons</td>\n      <td>42488161</td>\n      <td>42488161</td>\n      <td>NaN</td>\n      <td>6500000</td>\n      <td>May 22 1981</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>Universal</td>\n      <td>Original Screenplay</td>\n      <td>Comedy</td>\n      <td>Contemporary Fiction</td>\n      <td>Alan Alda</td>\n      <td>71.0</td>\n      <td>7.0</td>\n      <td>1814.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>Big Things</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>50000</td>\n      <td>Dec 31 2009</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>Bogus</td>\n      <td>4357406</td>\n      <td>4357406</td>\n      <td>NaN</td>\n      <td>32000000</td>\n      <td>Sep 06 1996</td>\n      <td>PG</td>\n      <td>NaN</td>\n      <td>Warner Bros.</td>\n      <td>Original Screenplay</td>\n      <td>Comedy</td>\n      <td>Fantasy</td>\n      <td>Norman Jewison</td>\n      <td>40.0</td>\n      <td>4.8</td>\n      <td>2742.0</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>Beverly Hills Cop</td>\n      <td>234760478</td>\n      <td>316300000</td>\n      <td>NaN</td>\n      <td>15000000</td>\n      <td>Dec 05 1984</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>Paramount Pictures</td>\n      <td>Original Screenplay</td>\n      <td>Action</td>\n      <td>Contemporary Fiction</td>\n      <td>Martin Brest</td>\n      <td>83.0</td>\n      <td>7.3</td>\n      <td>45065.0</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>Beverly Hills Cop II</td>\n      <td>153665036</td>\n      <td>276665036</td>\n      <td>NaN</td>\n      <td>20000000</td>\n      <td>May 20 1987</td>\n      <td>R</td>\n      <td>NaN</td>\n      <td>Paramount Pictures</td>\n      <td>Original Screenplay</td>\n      <td>Action</td>\n      <td>Contemporary Fiction</td>\n      <td>Tony Scott</td>\n      <td>46.0</td>\n      <td>6.1</td>\n      <td>29712.0</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>Beverly Hills Cop III</td>\n      <td>42586861</td>\n      <td>119180938</td>\n      <td>NaN</td>\n      <td>50000000</td>\n      <td>May 25 1994</td>\n      <td>R</td>\n      <td>NaN</td>\n      <td>Paramount Pictures</td>\n      <td>Original Screenplay</td>\n      <td>Action</td>\n      <td>Contemporary Fiction</td>\n      <td>John Landis</td>\n      <td>10.0</td>\n      <td>5.0</td>\n      <td>21199.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>68 rows × 16 columns</p>\n</div>\n```\n:::\n:::\n\n\n## 8. Working with URL\n\nReading a JSON file from an url needs an extra module in `requests` as any data from the Internet carries overheads that are necessary for efficient exchange of information(REST API). So, in order to read the file contents, we call upon *requests'* `text` attribute which fetches the contents of the file. \n\nHere, we use `json.loads` and not `json.load` as `loads` function expects contents(string) rather than a file pointer. If looked closely into the `json` module, the `load` calls `loads` using `read()` on the file. \n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nimport requests\n\nURL = 'https://vega.github.io/vega-datasets/data/cars.json'\n\ndata = json.loads(requests.get(URL).text)\npd.json_normalize(data)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Miles_per_Gallon</th>\n      <th>Cylinders</th>\n      <th>Displacement</th>\n      <th>Horsepower</th>\n      <th>Weight_in_lbs</th>\n      <th>Acceleration</th>\n      <th>Year</th>\n      <th>Origin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>chevrolet chevelle malibu</td>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>1970-01-01</td>\n      <td>USA</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>buick skylark 320</td>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>1970-01-01</td>\n      <td>USA</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>plymouth satellite</td>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>1970-01-01</td>\n      <td>USA</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>amc rebel sst</td>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>1970-01-01</td>\n      <td>USA</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ford torino</td>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>1970-01-01</td>\n      <td>USA</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>401</th>\n      <td>ford mustang gl</td>\n      <td>27.0</td>\n      <td>4</td>\n      <td>140.0</td>\n      <td>86.0</td>\n      <td>2790</td>\n      <td>15.6</td>\n      <td>1982-01-01</td>\n      <td>USA</td>\n    </tr>\n    <tr>\n      <th>402</th>\n      <td>vw pickup</td>\n      <td>44.0</td>\n      <td>4</td>\n      <td>97.0</td>\n      <td>52.0</td>\n      <td>2130</td>\n      <td>24.6</td>\n      <td>1982-01-01</td>\n      <td>Europe</td>\n    </tr>\n    <tr>\n      <th>403</th>\n      <td>dodge rampage</td>\n      <td>32.0</td>\n      <td>4</td>\n      <td>135.0</td>\n      <td>84.0</td>\n      <td>2295</td>\n      <td>11.6</td>\n      <td>1982-01-01</td>\n      <td>USA</td>\n    </tr>\n    <tr>\n      <th>404</th>\n      <td>ford ranger</td>\n      <td>28.0</td>\n      <td>4</td>\n      <td>120.0</td>\n      <td>79.0</td>\n      <td>2625</td>\n      <td>18.6</td>\n      <td>1982-01-01</td>\n      <td>USA</td>\n    </tr>\n    <tr>\n      <th>405</th>\n      <td>chevy s-10</td>\n      <td>31.0</td>\n      <td>4</td>\n      <td>119.0</td>\n      <td>82.0</td>\n      <td>2720</td>\n      <td>19.4</td>\n      <td>1982-01-01</td>\n      <td>USA</td>\n    </tr>\n  </tbody>\n</table>\n<p>406 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Conclusion\n\nWe saw the use of `json_normalize` function in pandas library. It helps take a JSON data, flatten it, and make it as a dataframe for easier analysis. \n\n## References\n\n1. B. Chen, https://towardsdatascience.com/all-pandas-json-normalize-you-should-know-for-flattening-json-13eae1dfb7dd\n2. Pandas documentation, https://pandas.pydata.org/pandas-docs/version/1.2.0/reference/api/pandas.json_normalize.html\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n#hide\n#{% bibliography --cited %}\n```\n:::\n\n\n",
    "supporting": [
      "2021-09-24-using-json-normalize_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}